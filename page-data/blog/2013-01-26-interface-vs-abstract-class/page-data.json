{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-01-26-interface-vs-abstract-class/","result":{"data":{"markdownRemark":{"html":"<p>Interface:</p>\n<p>An interface only describes the actual signature of its methods etc. Any class implementing that interface must then provide an explicit implementation.</p>\n<p>Interfaces provide definitions of methods that must be implemented by a class. The purpose of interfaces is to allow you to generalise specific functionality regardless of implementation. You may have an IDatabase interface that defines Open()/Close(). The class that implements that interface may be connecting to a MySQL database or MS Access database. Irrespective of <strong>how</strong> it accomplishes this task, the goal is still the same...Open database, close database.</p>\n<p>An interface is a contract, a specification that concrete<br>\nclasses MUST follow. It defines method signatures but<br>\ncannot have any implementations; the latter must be<br>\nprovided by the classes that implement the interface.</p>\n<p>C++ lacks native language support for interfaces. As a C++ programmers you<br>\nhave to create an interface by defining an abstract class with pure virtual methods.</p>\n<p>Abstract Class:</p>\n<p>An abstract class can contain a partial implementation of its methods etc.</p>\n<p>Abstract classes are base classes that contain some abstract methods. They cannot be instantiated they are to be derived from. The purpose of an Abstract class is to allow you to define some generic functionality and sub-class to implement more specific functionality where appropriate.</p>\n<p>An interface describes the behavior or capabilities of a C++ class without committing to a particular implementation of that class.</p>\n<p>The C++ interfaces are implemented using <strong>abstract classes</strong> and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation detail separate from associated data.</p>\n<p>A class is made abstract by declaring at least one of its functions as <strong>pure virtual</strong> function. A pure virtual function is specified by placing \"= 0\" in its declaration.</p>\n<p>The purpose of an <strong>abstract class</strong> (often referred to as an ABC) is to provide an appropriate base class from which other classes can inherit. Abstract classes cannot be used to instantiate objects and serves only as an <strong>interface</strong>. Attempting to instantiate an object of an abstract class causes a compilation error.</p>\n<p>Thus, if a subclass of an ABC needs to be instantiated, it has to implement each of the virtual functions, which means that it supports the interface declared by the ABC. Failure to override a pure virtual function in a derived class, then attempting to instantiate objects of that class, is a compilation error.</p>\n<p>We can see abstract class contains private members also we can put some methods with implementation also. But in case <em id=\"__mceDel\">of interface only methods and properties allowed.</em></p>\n<h3>What is an Abstract Class?</h3>\n<p>An abstract class is a special kind of class that cannot be instantiated. So the question is why we need a class that cannot be instantiated? An abstract class is only to be sub-classed (inherited from). In other words, it only allows other classes to inherit from it but cannot be instantiated. The advantage is that it enforces certain hierarchies for all the subclasses. In simple words, it is a kind of contract that forces all the subclasses to carry on the same hierarchies or standards.</p>\n<h3>What is an Interface?</h3>\n<p>An interface is not a class. It is an entity that is defined by the word Interface. An interface has no implementation; it only has the signature or in other words, just the definition of the methods without the body. As one of the similarities to Abstract class, it is a contract that is used to define hierarchies for all subclasses or it defines specific set of methods and their arguments. The main difference between them is that a class can implement more than one interface but can only inherit from one abstract class. Since C# doesn’t support multiple inheritance, interfaces are used to implement multiple inheritance.</p>\n<h3>Both Together</h3>\n<p>When we create an interface, we are basically creating a set of methods without any implementation that must be overridden by the implemented classes. The advantage is that it provides a way for a class to be a part of two classes: one from inheritance hierarchy and one from the interface.</p>\n<p>When we create an abstract class, we are creating a base class that might have one or more completed methods but at least one or more methods are left uncompleted and declared <code class=\"language-text\">abstract</code>. If all the methods of an abstract class are uncompleted then it is same as an interface. The purpose of an abstract class is to provide a base class definition for how a set of derived classes will work and then allow the programmers to fill the implementation in the derived classes.</p>","excerpt":"Interface: An interface only describes the actual signature of its methods etc. Any class implementing that interface must then provide an explicit…","frontmatter":{"date":"26 January, 2013","path":"/blog/2013-01-26-interface-vs-abstract-class/","title":"Interface vs Abstract Class"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}