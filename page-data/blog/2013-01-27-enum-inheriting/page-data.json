{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-01-27-enum-inheriting/","result":{"data":{"markdownRemark":{"html":"<p style=\"background:white;\"><span style=\"color:#ff9900;font-family:Segoe UI;font-size:15pt;\"><strong>The Problem<br/>\n</strong></span></p>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">C++ does not have a facility to allow one enum type to be extended by inheritance as it does for classes and structures. Sometimes it is important to have this functionality. Suppose you had:<br/>\n</span></p>\n<div>\n<table border=\"0\" style=\"border-collapse:collapse;\">\n<col style=\"width:638px;\"/>\n<tbody valign=\"top\">\n<tr>\n<td style=\"padding-left:7px;padding-right:7px;border:solid .5pt;\">\n<p style=\"background:#ccc0d9;\"><span style=\"color:green;font-family:Consolas;font-size:9pt;\"><em>// in Fruit.h<br/>\n</em></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">enum</span><span style=\"color:black;\"> Fruit { Orange, Mango, Banana };<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"color:green;font-family:Consolas;font-size:9pt;\"><em>// in eat.h<br/>\n</em></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\">#include </span><span style=\"color:purple;\">\"Fruit.h\"</span><span style=\"color:black;\"><br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">void</span><span style=\"color:black;\"> eat(Fruit fruit);</span></span></p>\n</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">If you wanted to add another fruit type, you could extend Fruit as follows:<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">enum</span><span style=\"color:black;\"> Fruit { Orange, Mango, Banana, Apple, Pear };<br/>\n</span></span></p>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">You could also have another function that handles the extra fruit:<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">void</span><span style=\"color:black;\"> consume(Fruit fruit);<br/>\n</span></span></p>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">There are two problems with this approach:<br/>\n</span></p>\n<ol><li>\n<div style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\"><em>Fruit.h</em>&nbsp;may be a library file that you don't necessarily want to change.<br/>\n</span></div>\n</li><li>\n<div style=\"background:white;\"><span style=\"color:#990000;font-family:Consolas;\">void eat(Fruit)</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;is implemented in some library that you can't change and as a result it might not handle 'Apple' properly but will still compile without errors. Your&nbsp;</span><span style=\"color:#990000;font-family:Consolas;\">consume(Fruit)</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;function may know about 'Apple' and handle it properly but library users, even though it is not your intention, may still call&nbsp;</span><span style=\"color:#990000;font-family:Consolas;\">eat(Apple)</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;with undefined behaviour.<br/>\n</span></div>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">In summary, the results of calls to&nbsp;</span><span style=\"color:#990000;font-family:Consolas;\">eat()</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;and&nbsp;</span><span style=\"color:#990000;font-family:Consolas;\">consume()</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;are as follows:<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"> eat( Orange ); </span><span style=\"color:green;\"><em>// compiles and behaves as expected<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"> consume( Orange ); </span><span style=\"color:green;\"><em>// compiles and behaves as expected<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"> eat( Apple ); </span><span style=\"color:green;\"><em>// compiles with UNDEFINED BEHAVIOUR<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"> consume( Apple ); </span><span style=\"color:green;\"><em>// compiles and behaves as expected</em></span><span style=\"color:black;\"><br/>\n</span></span></p>\n<p style=\"background:white;\"><span style=\"color:#ff9900;font-family:Segoe UI;font-size:15pt;\"><strong>The Solution<br/>\n</strong></span></p>\n<p style=\"background:white;\"><span style=\"color:#990000;font-family:Consolas;\">InheritEnum</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;solves this problem by allowing you to leave the first enum declaration as is and add another enum declaration with new enum types.<br/>\n</span></p>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">Following on from our example, to handle new fruits as well as the first set of fruits, we will then have:<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:green;font-family:Consolas;font-size:9pt;\"><em>// in -- MyFruit.h --<br/>\n</em></span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:navy;\">#include </span><span style=\"color:purple;\">\"Fruit.h\"</span><span style=\"color:navy;\"><br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:navy;\">#include </span><span style=\"color:purple;\">\"InheritEnum.h\"</span><span style=\"color:navy;\"><br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">enum</span><span style=\"color:black;\"> NewFruits { Apple, Pear };<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">typedef</span><span style=\"color:black;\"> InheritEnum&lt; NewFruit, Fruit &gt; MyFruit;<br/>\n</span></span></p>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">Now our&nbsp;</span><span style=\"color:#990000;font-family:Consolas;\">consume()</span><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">&nbsp;declaration becomes:<br/>\n</span></p>\n<p style=\"text-align:right;background:white;\">\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">void</span><span style=\"color:black;\"> consume(MyFruit myfruit);<br/>\n</span></span></p>\n<p style=\"background:white;\"><span style=\"color:#111111;font-family:Segoe UI;font-size:10pt;\">Now, our call summary looks as follows:<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\">eat( Orange ); </span><span style=\"color:green;\"><em>// compiles and behaves as expected<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\">consume( Orange ); </span><span style=\"color:green;\"><em>// compiles and behaves as expected<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\">eat( Apple ); </span><span style=\"color:green;\"><em>// does not compile as eat() does not handle NewFruit<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\">consume( Apple ); </span><span style=\"color:green;\"><em>// compiles and behaves as expected</em></span><span style=\"color:black;\"><br/>\n</span></span></p>\n<p style=\"background:white;\"><span style=\"color:#ff9900;font-family:Segoe UI;font-size:15pt;\"><strong>The Code<br/>\n</strong></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:green;font-family:Consolas;font-size:9pt;\"><em>// -- InheritEnum.h<br/>\n</em></span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\">template &lt;typename EnumT, typename BaseEnumT&gt;<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">class</span><span style=\"color:black;\"> InheritEnum<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\">{<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">public</span><span style=\"color:black;\">:<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> InheritEnum() {}<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> InheritEnum(EnumT e)<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> : enum_(e)<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> {}<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> InheritEnum(BaseEnumT e)<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> : baseEnum_(e)<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> {}<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"><br/>\n</span><span style=\"color:blue;\">explicit</span><span style=\"color:black;\"> InheritEnum( </span><span style=\"color:blue;\">int</span><span style=\"color:black;\"> val )<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> : enum_(static_cast&lt;EnumT&gt;(val))<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> {}<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\">\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"><br/>\n</span><span style=\"color:blue;\">operator</span><span style=\"color:black;\"> EnumT() </span><span style=\"color:blue;\">const</span><span style=\"color:black;\"> { </span><span style=\"color:blue;\">return</span><span style=\"color:black;\"> enum_; }<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:blue;\">private</span><span style=\"color:black;\">:<br/>\n</span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"><br/>\n</span><span style=\"color:green;\"><em>// Note - the value is declared as a union mainly for as a debugging aid. If<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"><br/>\n</span><span style=\"color:green;\"><em>// the union is undesired and you have other methods of debugging, change it<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"font-family:Consolas;font-size:9pt;\"><span style=\"color:black;\"><br/>\n</span><span style=\"color:green;\"><em>// to either of EnumT and do a cast for the constructor that accepts BaseEnumT.<br/>\n</em></span></span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> union<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> {<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> EnumT enum_;<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> BaseEnumT baseEnum_;<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\"> };<br/>\n</span></p>\n<p style=\"background:#ccc0d9;\"><span style=\"color:black;font-family:Consolas;font-size:9pt;\">};<br/>\n</span></p>\n</p></p></p></p></p></p></p></li></ol>","excerpt":"","frontmatter":{"date":"26 January, 2013","path":"/blog/2013-01-27-enum-inheriting/","title":"ENUM Inheriting"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}