{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-01-27-limit-the-creation-of-object-on-stack/","result":{"data":{"markdownRemark":{"html":"<p>You can prevent an object being declared with automatic duration (\"on the stack\") by making its constructor private and providing a factory (abstract factory or factory method) to control creation of new objects.</p>\n<p>To prevent accidental creation on the stack, make all constructors private, and/or make the destructor private, and provide friend or static functions that perform the same functionality.</p>\n<p>Use the [Named Constructor Idiom](<a href=\"http://www.parashift.com/c++-faq-lite/named-ctor-idiom.html\">http://www.parashift.com/c++-faq-lite/named-ctor-idiom.html</a> \"[10.8] What is the \"Named Constructor Idiom\"?\").</p>\n<p>As usual with the Named Constructor Idiom, the constructors are all <tt>private</tt> or <tt>protected</tt>, and there are one or more <tt>public</tt> <tt>static</tt> <tt>create()</tt> methods (the so-called \"named constructors\"), one per constructor. In this case the <tt>create()</tt> methods allocate the objects via <tt>new</tt>. Since the constructors themselves are not <tt>public</tt>, there is no other way to create objects of the class.</p>\n<pre>class Fred {\npublic:\n  // <em>The <tt>create()</tt> methods are the \"named constructors\":</em>\n  static Fred* create()                 { return new Fred();     }\n  static Fred* create(int i)            { return new Fred(i);    }\n  static Fred* create(Fred const&amp; fred) { return new Fred(fred); }\n  <em>...</em>\n\nprivate:\n  // <em>The constructors themselves are <tt>private</tt> or <tt>protected</tt>:</em>\n  Fred();\n  Fred(int i);\n  Fred(Fred const&amp; fred);\n  Fred&amp; operator= ( const Fred&amp; fred) ;\n  <em>...</em>\n};</pre>\n<p>Now the only way to create <tt>Fred</tt> objects is via <tt>Fred::create()</tt>:</p>\n<pre>int main()\n{\n  Fred* p = Fred::create(5);\n  <em>...</em>\n  delete p;\n  <em>...</em>\n}</pre>\n<p>Make sure your constructors are in the <tt>protected</tt> section if you expect <tt>Fred</tt> to have derived classes.</p>\n<p>To prevent an object from being allocated on the stack define a private destructor. This results in a compilation error for a stack based object, as it prohibits the implicit destructor call when a stack based object goes out of scope. You will need to implement a public destroy method, something along the lines of:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">void MyObject::destroy() const\n{\n   delete this;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p> </p>","excerpt":"You can prevent an object being declared with automatic duration (\"on the stack\") by making its constructor private and providing a factory (abstract factory or…","frontmatter":{"date":"26 January, 2013","path":"/blog/2013-01-27-limit-the-creation-of-object-on-stack/","title":"Limit the creation of object on Stack"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}