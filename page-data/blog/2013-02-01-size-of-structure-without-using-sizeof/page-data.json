{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-02-01-size-of-structure-without-using-sizeof/","result":{"data":{"markdownRemark":{"html":"<p>#define SIZEOF(X) (unsigned int)( (char *)(&#x26;X+1)-(char *)(&#x26;X) )</p>\n<p>struct sample *ptr;<br>\nptr=(struct sample*)0;<br>\nprintf(\"%d\",++ptr);</p>\n<p>p1 = (unsigned char*)(ptr);</p>\n<p>p2 = (unsigned char*)(++ptr);</p>\n<p>size = p2 - p1;</p>\n<p>Can also find out by declaring an Array of structure and finding the difference between addresses of the first and second element in the array.</p>\n<p>struct sample s[2] ;</p>\n<p>int s1 = (int) &#x26;s[0] ;</p>\n<p>int s2 = (int) &#x26;s[1] ;</p>\n<p>printf ( \"%d\\n\", s2 - s1 ) ;</p>","excerpt":"#define SIZEOF(X) (unsigned int)( (char *)(&X+1)-(char *)(&X) ) struct sample *ptr; ptr=(struct sample*)0; printf(\"%d\",++ptr); p1 = (unsigned char*)(ptr); pâ€¦","frontmatter":{"date":"01 February, 2013","path":"/blog/2013-02-01-size-of-structure-without-using-sizeof/","title":"Size of Structure without using sizeof()"},"fields":{"readingTime":{"text":"1 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}