{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-02-22-lru-cache-in-c/","result":{"data":{"markdownRemark":{"html":"<p>Design an LRU cache with all the operations including getting the least recently used item to be O(1)</p>\n<p><code class=\"language-text\">#include &amp;lt;iostream&amp;gt;</code></p>\n<div><code>#include &lt;vector&gt;</code></div>\n<div><code>#include &lt;hash_map&gt;</code></div>\n<div></div>\n<div><code>using namespace std;</code></div>\n<div></div>\n<div><code>template &lt;</code><code>class</code> <code>K, </code><code>class</code> <code>T&gt;</code></div>\n<div><code>struct LRUCacheEntry</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code><code>K key;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code><code>T data;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code><code>LRUCacheEntry * prev;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code><code>LRUCacheEntry * next;</code></div>\n<div><code>};</code></div>\n<div></div>\n<div><code>template &lt;</code><code>class</code> <code>K, </code><code>class</code> <code>T&gt;</code></div>\n<div><code>class</code> <code>LRUCache</code></div>\n<div><code>{</code></div>\n<div><code>public</code><code>:</code></div>\n<div><code>&nbsp;&nbsp;</code><code>LRUCache(size_t sz) : head(NULL), tail(NULL){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entries = </code><code>new</code> <code>LRUCacheEntry&lt;K, T&gt;[sz];</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>for</code> <code>(</code><code>int</code> <code>i = </code><code>0</code><code>; i &lt; sz; i++)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>freeEntries.push_back(entries + i);</code></div>\n<div><code>&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>~LRUCache(){&nbsp; delete[] entries; } </code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>bool containsKey(K key) { </code><code>return</code> <code>_m.find(key) != _m.end(); }</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>void</code> <code>put(K key, T data){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>LRUCacheEntry&lt;K, T&gt; * entry;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(_m.find(key) != _m.end()) </code><code>return</code><code>;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(freeEntries.size() &gt; </code><code>0</code><code>){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry = freeEntries.back();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>freeEntries.pop_back();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>else</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>// no free entries</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry = tail;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(tail-&gt;prev != NULL) tail-&gt;prev-&gt;next = NULL;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>_m.erase(entry-&gt;key);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>_m[key] = entry;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;key = key;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;data = data;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;next = head; </code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;prev = NULL;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(head != NULL){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>head-&gt;prev = entry;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>head = entry;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>// we assumes that containsKey is always called before this method</code></div>\n<div><code>&nbsp;&nbsp;</code><code>T get(K key) {&nbsp; </code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>LRUCacheEntry&lt;K, T&gt; * entry = _m[key];</code></div>\n<div><code>&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(entry != head){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(entry-&gt;next != NULL)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;next-&gt;prev = entry-&gt;prev;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;prev-&gt;next = entry-&gt;next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(entry == tail) tail = entry-&gt;prev;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;next = head;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry-&gt;prev = NULL;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>head = entry;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>entry-&gt;data;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>void</code> <code>print(){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>LRUCacheEntry&lt;K, T&gt; * entry = head;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code> <code>(entry != NULL){</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>cout &lt;&lt; entry-&gt;data &lt;&lt; </code><code>\" \"</code><code>;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>entry = entry-&gt;next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>cout &lt;&lt; endl;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>private</code><code>:</code></div>\n<div><code>&nbsp;&nbsp;</code><code>hash_map&lt;K, LRUCacheEntry&lt;K, T&gt; *&gt; _m;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>LRUCacheEntry&lt;K, T&gt; * head, *tail, *entries;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>vector&lt;LRUCacheEntry&lt;K, T&gt; *&gt; freeEntries;</code></div>\n<div><code>};</code></div>\n<div></div>\n<div></div>\n<div></div>\n<div><code>int</code> <code>main()</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>LRUCache&lt;</code><code>int</code><code>, </code><code>int</code><code>&gt;&nbsp; cache(</code><code>3</code><code>);</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>cache.put(</code><code>3</code><code>, </code><code>3</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;</code><code>cache.put(</code><code>4</code><code>, </code><code>4</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;</code><code>cache.put(</code><code>5</code><code>, </code><code>5</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>cache.print();</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>cache.get(</code><code>3</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;</code><code>cache.print();</code></div>\n<div><code>&nbsp;&nbsp;</code><code>return</code> <code>0</code><code>;</code></div>\n<div><code>}</code></div>","excerpt":"Design an LRU cache with all the operations including getting the least recently used item to be O(1)","frontmatter":{"date":"21 February, 2013","path":"/blog/2013-02-22-lru-cache-in-c/","title":"LRU Cache in C++"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}