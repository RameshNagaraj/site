{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-04-18-casting-in-c/","result":{"data":{"markdownRemark":{"html":"<h2>static_cast</h2>\n<p><code class=\"language-text\">static_cast</code> is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions. <code class=\"language-text\">static_cast</code> performs no runtime checks. This should be used if you know that you refer to an object of a specific type, and thus a check would be unnecessary. Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">void func(void *data) {\n  // conversion from MyClass* -&amp;gt; void* is implicit\n  MyClass *c = static_cast&amp;lt;MyClass*&amp;gt;(data);\n  ...\n}\n\nint main() {\n  MyClass c;\n  start_thread(&amp;amp;func, &amp;amp;c)  // func(&amp;amp;c) will be called\n      .join();\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In this example, you know that you passed a <code class=\"language-text\">MyClass</code> object, and thus there is no need for a runtime check to ensure this.</p>\n<h2>dynamic_cast</h2>\n<p><code class=\"language-text\">dynamic_cast</code> is used for cases where you don't know what the dynamic type of the object is. You cannot use <code class=\"language-text\">dynamic_cast</code> if you downcast and the argument type is not polymorphic. An example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">if(JumpStm *j = dynamic_cast&amp;lt;JumpStm*&amp;gt;(&amp;amp;stm)) {\n  ...\n} else if(ExprStm *e = dynamic_cast&amp;lt;ExprStm*&amp;gt;(&amp;amp;stm)) { \n  ...\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">dynamic_cast</code> returns a null pointer if the object referred to doesn't contain the type casted to as a base class (when you cast to a reference, a <code class=\"language-text\">bad_cast</code> exception is thrown in that case).</p>\n<p>The following code is not valid, because <code class=\"language-text\">Base</code> is not polymorphic (doesn't contain a virtual function):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">struct Base { };\nstruct Derived : Base { };\nint main() { \n  Derived d; Base *b = &amp;amp;d;\n  dynamic_cast&amp;lt;Derived*&amp;gt;(b); // invalid\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>An \"up-cast\" is always valid with both <code class=\"language-text\">static_cast</code> and <code class=\"language-text\">dynamic_cast</code>, and also without any cast, as an \"up-cast\" is an implicit conversion.</p>\n<h2>Regular Cast</h2>\n<p>These casts are also called c-style cast. A c-style cast is basically identical to trying out a range of sequences of C++ casts, and taking the first c++ cast that works, without ever considering<code class=\"language-text\">dynamic_cast</code>. Needless to say that this is much more powerful as it combines all of <code class=\"language-text\">const_cast</code>,<code class=\"language-text\">static_cast</code> and <code class=\"language-text\">reinterpret_cast</code>, but it's also unsafe because it does not use<code class=\"language-text\">dynamic_cast</code>.</p>\n<p>In addition, C-style casts not only allow you to do this, but also allow you to safely cast to a private base-class, while the \"equivalent\" <code class=\"language-text\">static_cast</code> sequence would give you a compile time error for that.</p>\n<p>Some people prefer c-style casts because of their brevity. I use them for numeric casts only, and use the appropriate C++ casts when user defined types are involved, as they provide stricter checking.</p>\n<p> </p>\n<table>\n<tbody>\n<tr>\n<td colspan=\"2\"></td>\n</tr>\n<tr>\n<td><a href=\"http://en.cppreference.com/w/cpp/language/const_cast\" title=\"cpp/language/const cast\">const_cast conversion</a></td>\n<td>adds or removes const</td>\n</tr>\n<tr>\n<td colspan=\"2\"></td>\n</tr>\n<tr>\n<td><a href=\"http://en.cppreference.com/w/cpp/language/static_cast\" title=\"cpp/language/static cast\">static_cast conversion</a></td>\n<td>performs basic conversions</td>\n</tr>\n<tr>\n<td colspan=\"2\"></td>\n</tr>\n<tr>\n<td><a href=\"http://en.cppreference.com/w/cpp/language/dynamic_cast\" title=\"cpp/language/dynamic cast\">dynamic_cast conversion</a></td>\n<td>performs checked polymorphic conversions</td>\n</tr>\n<tr>\n<td colspan=\"2\"></td>\n</tr>\n<tr>\n<td><a href=\"http://en.cppreference.com/w/cpp/language/reinterpret_cast\" title=\"cpp/language/reinterpret cast\">reinterpret_cast conversion</a></td>\n<td>performs general low-level conversions</td>\n</tr>\n<tr>\n<td colspan=\"2\"></td>\n</tr>\n<tr>\n<td><a href=\"http://en.cppreference.com/w/cpp/language/implicit_cast\" title=\"cpp/language/implicit cast\">standard conversions</a></td>\n<td>implicit conversions from one type to another</td>\n</tr>\n</tbody>\n</table>\n<p> </p>\n<p>END</p>","excerpt":"static_cast  is used for cases where you basically want to reverse an implicit conversion, with a few restrictions and additions.  performs no runtime checks…","frontmatter":{"date":"18 April, 2013","path":"/blog/2013-04-18-casting-in-c/","title":"Casting in C++"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}