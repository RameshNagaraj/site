{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-04-26-print-the-elements-of-a-c-vector-in-gdb/","result":{"data":{"markdownRemark":{"html":"<p>With GCC 4.1.2, to print the whole of a std::vector&#x3C;int> called myVector, do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">print *(myVector._M_impl._M_start)@myVector.size()</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>To print only the first N elements, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">print *(myVector._M_impl._M_start)@N</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Explanation</strong></p>\n<p>This is probably heavily dependent on your compiler version, but for GCC 4.1.2, the pointer to the internal array is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">myVector._M_impl._M_start </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>And the GDB command to print N elements of an array starting at pointer P is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">print P@N</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Or, in a short form (for a standard .gdbinit):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">p P@N</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>(gdb) what vIPIFMOC<br>\ntype = std::vector&#x3C;SManagedObj,std::allocator&#x3C;SManagedObj> ><br>\n(gdb) p vIPIFMOC<br>\n$2 = {<br>\n&#x3C;std::_Vector_base&#x3C;SManagedObj,std::allocator&#x3C;SManagedObj> >> = {<br>\n<strong>_M_impl</strong> = {<br>\n&#x3C;std::allocator&#x3C;SManagedObj>> = {<br>\n&#x3C;__gnu_cxx::new_allocator&#x3C;SManagedObj>> = {&#x3C;No data fields>}, &#x3C;No data fields>},<br>\nmembers of std::_Vector_base&#x3C;SManagedObj,std::allocator&#x3C;SManagedObj> >::_Vector_impl:<br>\n<strong>_M_start</strong> = 0x556802cb70,<br>\n_M_finish = 0x556802cc30,<br>\n_M_end_of_storage = 0x556802cc30<br>\n}<br>\n}, &#x3C;No data fields>}<br>\n(gdb) p *(<strong>vIPIFMOC._M_impl._M_start</strong>)@1</p>\n<p>Options-2:</p>\n<p>In the gdb:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">source {full_path}stl-views.gdb</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>now you'll have new commands, such as <code class=\"language-text\">pvector, plist, pmap</code> and more (replace <strong>{full_path}</strong> with the full path to the file.</p>\n<p>You can also put the command <code class=\"language-text\">source stl-views.gdb</code> in <code class=\"language-text\">~/.gdbinit</code> - and then you'll have it automatically every time you launch gdb.</p>\n<p><a href=\"http://rameshnagaraj.files.wordpress.com/2013/04/stl-views-gdb1.doc\">stl-views.gdb</a></p>\n<p>Option-3:</p>\n<p>For performance reasons, <a href=\"http://www.sgi.com/tech/stl/\">SGI's STL implmentation</a> is all inline; a naming convention is generally followed (i.e. double underscore as a prefix for local variables), but tends to create long, cryptic variable names. Unfortunately, raw <a href=\"http://www.gnu.org/software/gdb/gdb.html\">gdb</a> is not a graceful way to debug STL-heavy code, the reasons being -</p>\n<ul>\n<li>First, the 'T' in \"STL\" stands for \"template\"; while you as a programmer have full information about what is the argument to the template, gdb does not necessarily have access to this knowledge. As a result, gdb will tend to think that every (templated) pointer is a (void*), and will have no access to its internals should it point to a class.</li>\n<li>The traversal of some containers (hashes, trees) is complicated; obtaining the \"first()\" and \"next()\" elements of a container is a tricky task.</li>\n<li>Some data, such as the size of lists, is not stored explicitly - and there is simply no way to find it out in gdb.</li>\n</ul>\n<p><a href=\"http://rameshnagaraj.files.wordpress.com/2013/04/gdb_stl_utils-gdb.doc\">gdb_stl_utils.gdb</a>  is a small utility that may help solving these problems.<br>\nTo use it, download and compile <a href=\"http://rameshnagaraj.files.wordpress.com/2013/04/stlstdcontainers-cc.doc\">StlStdContainers.cc</a> (a simple g++ StlStdContainers.cc -o StlStdContainers.o will do); then, load <a href=\"http://staff.science.uva.nl/~gilad/stl/gdb_stl_utils\">g</a>db_stl_utils into gdb by using the command \"source gdb_stl_utils\" (in gdb) or including in .gdbinit. You will then have access to the following gdb function:</p>\n<p>p_stl_vector, p_stl_vector_size<br>\np_stl_list, p_stl_list_size<br>\np_stl_tree, p_stl_tree_size (for maps and sets)<br>\np_stl_hash, p_stl_hash_size (for hash_maps and sets)</p>\n<p>The names are self-explanatory: the functions print the contents and the sizes of STL containers given to them.</p>\n<p>Good luck and happy debugging!</p>\n<p>Note: From above attachments, remove .doc extensions and use.</p>","excerpt":"With GCC 4.1.2, to print the whole of a std::vector<int> called myVector, do the following: To print only the first N elements, do: Explanation This is probably…","frontmatter":{"date":"26 April, 2013","path":"/blog/2013-04-26-print-the-elements-of-a-c-vector-in-gdb/","title":"Print the elements of a C++ vector in GDB?"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}