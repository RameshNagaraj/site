{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-05-03-stl-containers-begin-end-returns-const_iterator/","result":{"data":{"markdownRemark":{"html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">map&amp;lt;string,Shopable*&amp;gt;::iterator it = mymap.begin();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>The iterator appears to be constant, but <code class=\"language-text\">items.begin()</code> doesn't return a constant iterator. Or, that's what I <strong><em>think</em></strong> because the mouseover error is something like:</p>\n<p>Compiler Error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&quot;No conversion from &#39;std::Tree_const_iterator&amp;lt;...&amp;gt; to std::Tree_iterator&amp;lt;...&amp;gt; exists&#39;&quot;.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Answer:</p>\n<p>Use <code class=\"language-text\">const_iterator</code> as :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">map&amp;lt;string,Shopable*&amp;gt;::const_iterator it = mymap.begin();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>From the error, its clear that <code class=\"language-text\">mymap.begin()</code> returns <code class=\"language-text\">const_iterator</code>. That is because <code class=\"language-text\">mymap</code> is<code class=\"language-text\">const</code> in the function where you've written this, something like following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">void f(const std::map&amp;lt;int,int&amp;gt; &amp;amp; m)\n{    //^^^^^ note this\n\n      std::map&amp;lt;int,int&amp;gt;::const_iterator it = m.begin(); //m is const in f()\n                       //^^^^^ note this\n}\n\nvoid g(std::map&amp;lt;int,int&amp;gt; &amp;amp; m)\n{\n      std::map&amp;lt;int,int&amp;gt;::iterator it = m.begin(); //m is non-const in g()\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>That is, <code class=\"language-text\">const</code> container (whether its <code class=\"language-text\">std::map</code>, <code class=\"language-text\">std::vector</code> etc) returns <code class=\"language-text\">const_iterator</code> and non-const container returns <code class=\"language-text\">iterator</code>.</p>\n<p>Every container has overloaded functions of <code class=\"language-text\">begin()</code> and <code class=\"language-text\">end()</code>. So <code class=\"language-text\">const</code> container invokes the overloaded <code class=\"language-text\">begin()</code> which returns <code class=\"language-text\">const_iterator</code> and non-const container invokes the other overloaded <code class=\"language-text\">begin()</code> which returns <code class=\"language-text\">iterator</code>. And same for <code class=\"language-text\">end()</code> overloaded functions. Ex:</p>\n<p><span style=\"color:#000000;font-weight:bold;font-style:inherit;line-height:1.625;\">std::</span><a href=\"http://www.cplusplus.com/reference/map/map/\" style=\"font-weight:bold;font-style:inherit;line-height:1.625;\">map</a><span style=\"color:#000000;font-weight:bold;font-style:inherit;line-height:1.625;\">::begin</span></p>\n<pre>iterator begin();\nconst_iterator begin() const;</pre>\n<p>The problem is that <code class=\"language-text\">mymap</code> in the code above is a constant map, not a mutable map (maybe it is a member of a class and that code is inside constant member function?). Thus the call to<code class=\"language-text\">mymap.begin()</code> will pichup the overload that returns a <code class=\"language-text\">const_iterator</code> instead of the overload that returns an <code class=\"language-text\">iterator</code>.</p>\n<p> </p>\n<p>End</p>\n<p> </p>","excerpt":"The iterator appears to be constant, but  doesn't return a constant iterator. Or, that's what I think because the mouseover error is something like: Compiler…","frontmatter":{"date":"03 May, 2013","path":"/blog/2013-05-03-stl-containers-begin-end-returns-const_iterator/","title":"STL Containers begin() / end() returns const_iterator ?"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}