{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-05-03-stl-map-efficiently-search-for-prefix/","result":{"data":{"markdownRemark":{"html":"<p>For <em>prefix</em>  searching, you can use <a href=\"http://www.cplusplus.com/reference/stl/map/lower_bound/\" rel=\"nofollow\"><code class=\"language-text\">lower_bound</code></a> to search for <code class=\"language-text\">&quot;Marl&quot;</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">    map&amp;lt;string,string&amp;gt;::const_iterator m = tMap.lower_bound(&quot;Marl&quot;);\n    cerr &amp;lt;&amp;lt; (*m).second &amp;lt;&amp;lt; endl;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>This does not work for non-prefix substrings: in the general case, searching a map is not much different from searching other containers.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;map&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\nusing namespace std;\n\ntypedef map&amp;lt;string, string&amp;gt; TStrStrMap;\ntypedef pair&amp;lt;string, string&amp;gt; TStrStrPair;\n\nTStrStrMap::const_iterator FindPrefix(const TStrStrMap&amp;amp; map, const string&amp;amp; search_for) {\n    TStrStrMap::const_iterator i = map.lower_bound(search_for);\n    if (i != map.end()) {\n        const string&amp;amp; key = i-&amp;gt;first;\n        if (key.compare(0, search_for.size(), search_for) == 0) // Really a prefix?\n            return i;\n    }\n    return map.end();\n}\n\nvoid Test(const TStrStrMap&amp;amp; map, const string&amp;amp; search_for) {\n    cout &amp;lt;&amp;lt; search_for;\n    auto i = FindPrefix(map, search_for);\n    if (i != map.end())\n        cout &amp;lt;&amp;lt; &#39;\\t&#39; &amp;lt;&amp;lt; i-&amp;gt;first &amp;lt;&amp;lt; &quot;, &quot; &amp;lt;&amp;lt; i-&amp;gt;second;\n    cout &amp;lt;&amp;lt; endl;\n}\n\nint main(int argc, char *argv[])\n{\n    TStrStrMap tMap;\n\n    tMap.insert(TStrStrPair(&quot;John&quot;, &quot;AA&quot;));\n    tMap.insert(TStrStrPair(&quot;Mary&quot;, &quot;BBB&quot;));\n    tMap.insert(TStrStrPair(&quot;Mother&quot;, &quot;A&quot;));\n    tMap.insert(TStrStrPair(&quot;Marlon&quot;, &quot;C&quot;));\n\n    Test(tMap, &quot;Marl&quot;);\n    Test(tMap, &quot;Mo&quot;);\n    Test(tMap, &quot;ther&quot;);\n    Test(tMap, &quot;Mad&quot;);\n    Test(tMap, &quot;Mom&quot;);\n    Test(tMap, &quot;Perr&quot;);\n    Test(tMap, &quot;Jo&quot;);\n\n    return 0;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>This prints:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Marl    Marlon, C\nMo      Mother, A\nther\nMad\nMom\nPerr\nJo      John, AA</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>End</p>","excerpt":"For prefix  searching, you can use  to search for . This does not work for non-prefix substrings: in the general case, searching a map is not much different…","frontmatter":{"date":"03 May, 2013","path":"/blog/2013-05-03-stl-map-efficiently-search-for-prefix/","title":"STL Map - efficiently search for Prefix"},"fields":{"readingTime":{"text":"1 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}