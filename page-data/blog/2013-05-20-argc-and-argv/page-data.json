{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-05-20-argc-and-argv/","result":{"data":{"markdownRemark":{"html":"<p>First, K&#x26;R have an errata on this particular snippet:</p>\n<blockquote>\n<p>\n117(§5.10): In the <em>find</em> example, the program increments <code class=\"language-text\">argv[0]</code>. This is not specifically forbidden, but not specifically allowed either.</p>\n</blockquote>\n<p>Now for the explanation.</p>\n<p>Let's say your program is named <code class=\"language-text\">prog</code>, and you execute it with: <code class=\"language-text\">prog -ab -c Hello World</code>. You want to be able to parse the arguments to say that options <code class=\"language-text\">a</code>, <code class=\"language-text\">b</code> and <code class=\"language-text\">c</code> were specified, and <code class=\"language-text\">Hello</code>and <code class=\"language-text\">World</code> are the non-option arguments.</p>\n<p><code class=\"language-text\">argv</code> is of type <code class=\"language-text\">char **</code>—remember that an array parameter in a function is the same as a pointer. At program invocation, things look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">                 +---+         +---+---+---+---+---+\n argv ----------&amp;gt;| 0 |--------&amp;gt;| p | r | o | g | 0 |\n                 +---+         +---+---+---+---+---+\n                 | 1 |--------&amp;gt;| - | a | b | 0 |\n                 +---+         +---+---+---+---+\n                 | 2 |--------&amp;gt;| - | c | 0 |\n                 +---+         +---+---+---+---+---+---+\n                 | 3 |--------&amp;gt;| H | e | l | l | o | 0 |\n                 +---+         +---+---+---+---+---+---+\n                 | 4 |--------&amp;gt;| W | o | r | l | d | 0 |\n                 +---+         +---+---+---+---+---+---+\n                 | 5 |--------&amp;gt;NULL\n                 +---+</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here, <code class=\"language-text\">argc</code> is 5, and <code class=\"language-text\">argv[argc]</code> is <code class=\"language-text\">NULL</code>. At the beginning, <code class=\"language-text\">argv[0]</code> is a <code class=\"language-text\">char *</code> containing the string <code class=\"language-text\">&quot;prog&quot;</code>.</p>\n<p>In <code class=\"language-text\">(*++argv)[0]</code>, because of the parentheses, <code class=\"language-text\">argv</code> is incremented first, and then dereferenced. The effect of the increment is to move that <code class=\"language-text\">argv ----------&amp;gt;</code> arrow \"one block down\", to point to the<code class=\"language-text\">1</code>. The effect of dereferencing is to get a pointer to the first commandline argument, <code class=\"language-text\">-ab</code>. Finally, we take the first character (<code class=\"language-text\">[0]</code> in <code class=\"language-text\">(*++argv)[0]</code>) of this string, and test it to see if it is <code class=\"language-text\">&#39;-&#39;</code>, because that denotes the start of an option.</p>\n<p>For the second construct, we actually want to walk down the string pointed to by the current <code class=\"language-text\">argv[0]</code>pointer. So, we need to treat <code class=\"language-text\">argv[0]</code> as a pointer, ignore its first character (that is <code class=\"language-text\">&#39;-&#39;</code> as we just tested), and look at the other characters:</p>\n<p><code class=\"language-text\">++(argv[0])</code> will increment <code class=\"language-text\">argv[0]</code>, to get a pointer to the first non- <code class=\"language-text\">-</code> character, and dereferencing it will give us the value of that character. So we get <code class=\"language-text\">*++(argv[0])</code>. But since in C, <code class=\"language-text\">[]</code>binds more tightly than <code class=\"language-text\">++</code>, we can actually get rid of the parentheses and get our expression as<code class=\"language-text\">*++argv[0]</code>. We want to continue processing this character until it's <code class=\"language-text\">0</code> (the last character box in each of the rows in the above picture).</p>\n<p>The expression</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">c = *++argv[0]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>assigns to <code class=\"language-text\">c</code> the value of the current option, and <em>has the value <code class=\"language-text\">c</code></em>. <code class=\"language-text\">while(c)</code> is a shorthand for<code class=\"language-text\">while(c != 0)</code>, so the <code class=\"language-text\">while(c = *++argv[0])</code> line is basically assigning the value of the current option to <code class=\"language-text\">c</code> and testing it to see if we have reached the end of the current command-line argument.</p>\n<p>At the end of this loop, argv will point to the first non-option argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">                 +---+         +---+---+---+---+---+\n                 | 0 |--------&amp;gt;| p | r | o | g | 0 |\n                 +---+         +---+---+---+---+---+\n                 | 1 |--------&amp;gt;| - | a | b | 0 |\n                 +---+         +---+---+---+---+\n                 | 2 |--------&amp;gt;| - | c | 0 |\n                 +---+         +---+---+---+---+---+---+\n argv ----------&amp;gt;| 3 |--------&amp;gt;| H | e | l | l | o | 0 |\n                 +---+         +---+---+---+---+---+---+\n                 | 4 |--------&amp;gt;| W | o | r | l | d | 0 |\n                 +---+         +---+---+---+---+---+---+\n                 | 5 |--------&amp;gt;NULL\n                 +---+</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> </p>\n<p>END</p>","excerpt":"First, K&R have an errata on this particular snippet:  \n117(§5.10): In the find example, the program increments . This is not specifically forbidden, but not…","frontmatter":{"date":"20 May, 2013","path":"/blog/2013-05-20-argc-and-argv/","title":"ArgC and ArgV"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}