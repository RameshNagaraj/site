{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-16-array-detect-repeated-elements-in-an-integer-array/","result":{"data":{"markdownRemark":{"html":"<div>This is an open ended question so please ask questions about the nature of the data in the array (size of the data, is it sorted or almost sorted, range of the data). Also, ask about any constraints like runtime or memory usage. You selection of the technique will depend on the answers to those questions. I have listed a few techniques below that touch on some of those points. There are more solutions that may be appropriate under different conditions. Feel free to suggest them in the comments.</div>\n<ul>\n<li>Sort the array in-place and loop through to find the duplicate number</li>\n</ul>\n<p>Runtime: O(n log n) for sorting + O(n)<br>\nPros: no extra memory<br>\nCons: extra pass over the array is needed to actually find the duplicate<br>\nCode(C#):</p>\n<pre>  using System;\n  using System.Collections.Generic;\n  namespace ArrayQuestions.FindDuplicateNumber\n  {\n&nbsp; &nbsp; class Program\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; static void Main(string[] args)\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int[] array = new int[]{3, 2, 4, 5, 3, 2, 9, 6, 3, 6, 9, 9, 9};\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Array.Sort(array);&nbsp;\n            // note: this is a O(n square) sort but one could use a O(n log n)&nbsp;\n            // sort easily.\n  &nbsp; &nbsp;       // expected output: 2, 2, 3, 3, 3, 4, 5, 6, 6, 9, 9, 9, 9\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(int i=0; i&lt; array.Length - 1;)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   int count = 1;\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while(i &lt; array.Length - 1 &amp;&amp; array[i] == array[++i])\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;{\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     count++;   \n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;}\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(count &gt; 1)\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     Console.WriteLine(\"{0} occurs {1} times\", array[i-1], count);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Console.ReadLine();\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp;  }\n  }</pre>\n<ul>\n<li>Perform custom in-place insertion sort and check for duplicates during the inserts</li>\n</ul>\n<p>Runtime: O(n square). This is worst case but in practice it could be much lower (close to O(n)<br>\nfor almost sorted input)<br>\nPros: No extra pass need<br>\nCons: It has the potential to be really slow for large inputs or sets that are not almost sorted.</p>\n<ul>\n<li>Use a hash table to remember the numbers encountered so far. Collision during insertion signals a duplicate.</li>\n</ul>\n<p>Runtime: O(n) (This is assuming insert and lookup operations on the hashtable are truly O(1))<br>\nPros: fast<br>\nCons: potentially high memory usage for hash table<br>\nCode(C#)</p>\n<pre>&nbsp; &nbsp; using System;\n    using System.Collections.Generic;\n    using System.Collections;\n    namespace ArrayQuestions.FindDuplicateNumber\n    {\n&nbsp; &nbsp;     class Program\n&nbsp; &nbsp;     {\n&nbsp; &nbsp; &nbsp; &nbsp;     static void Main(string[] args)\n&nbsp; &nbsp; &nbsp; &nbsp;     {\n  &nbsp;     &nbsp;       int[] array = new int[]{3, 2, 4, 5, 3, 2, 9, 6, 3, 6, 9, 9, 9};\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     Dictionary&lt;int, int=\"\"&gt; dictionary = new Dictionary&lt;int,int&gt;();\n\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; array.Length; i++)\n&nbsp; &nbsp;     &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp;     &nbsp; &nbsp; &nbsp; &nbsp; if (dictionary.ContainsKey(array[i]))\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     &nbsp; &nbsp; &nbsp; &nbsp; dictionary[array[i]]++;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     else\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     dictionary.Add(array[i], 1);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     }\n\n    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (var entry in dictionary)\n&nbsp; &nbsp;     &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp;     &nbsp; &nbsp; &nbsp; &nbsp; Console.WriteLine(\"{0} occurs {1} times\", entry.Key, entry.Value);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     }\n            }\n&nbsp; &nbsp;     }\n    }</pre>\n<ul>\n<li>Use a <a href=\"http://en.wikipedia.org/wiki/Bit_array\" rel=\"nofollow\" target=\"_blank\">bit-vector</a> to remember the number encountered so far.</li>\n</ul>\n<p>Runtime: O(n)<br>\nPro: fast, compact bit vector reduces memory usage<br>\nCons:  </p>\n<ol>\n<li>Additional memory is needed for the bit vector  </li>\n<li>Initializing bit vector will add add to the runtime time  </li>\n<li>Slightly complex implementation if one has to  implement the bit-vector code itself.<br>\nPseudo Code:  </li>\n<li>Initialize the bit-vector to all 0s.  </li>\n<li>Loop through the array and for each number check the corresponding bit in the bit-vector.<br>\nIf the bit is already set it signals a duplicate. If bit is not set, set the bit and continue.</li>\n</ol>\n<p>END</p>","excerpt":"Sort the array in-place and loop through to find the duplicate number Runtime: O(n log n) for sorting + O(n) Pros: no extra memory Cons: extra pass over the…","frontmatter":{"date":"16 September, 2013","path":"/blog/2013-09-16-array-detect-repeated-elements-in-an-integer-array/","title":"[ARRAY] Detect Repeated elements in an integer array"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}