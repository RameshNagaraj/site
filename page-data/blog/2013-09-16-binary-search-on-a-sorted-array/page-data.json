{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-16-binary-search-on-a-sorted-array/","result":{"data":{"markdownRemark":{"html":"<p>Problem: Write a function to perform a binary search on a Sorted Array.</p>\n<p>Solution: The recursive solution below runs in O(log(n)) because the problem size is halved with each recursive call.</p>\n<pre>// returns the index of the target element if found, else returns -1\n        static int Binary_Search(int[] arr, int start, int end, int target)\n        {\n           int medianIndex = (end - start) /2 + start;\n           int medianValue = arr[medianIndex];\n\n           if(start == end &amp;&amp; arr[start] != target)\n               return -1;\n           if (medianValue == target)\n               return medianIndex;\n           else if (medianValue &lt; target)\n               return Binary_Search(arr, medianIndex + 1, end, target);\n           else\n               return Binary_Search(arr, start, medianIndex - 1, target);\n        }</pre>\n<p>END</p>","excerpt":"Problem: Write a function to perform a binary search on a Sorted Array. Solution: The recursive solution below runs in O(log(n)) because the problem size isâ€¦","frontmatter":{"date":"16 September, 2013","path":"/blog/2013-09-16-binary-search-on-a-sorted-array/","title":"[ARRAY] Binary Search on a Sorted Array"},"fields":{"readingTime":{"text":"1 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}