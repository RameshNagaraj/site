{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-16-merge-2-sorted-arrays-one-has-empty-slots/","result":{"data":{"markdownRemark":{"html":"<p>Question: There are two sorted arrays A1 and A2. Array A1 is full where as array A2 is partially empty and number of empty slots are just enough to accommodate all elements of A1. Write a program to merge the two sorted arrays to fill the array A2. You cannot use any additional memory and expected run time is O(n).</p>\n<p>Solution: The trick to solving this problem is to start filling the destination array from the back with the largest elements. You will end up with a merged and sorted destination array.<br>\n<a href=\"https://rameshnagaraj.files.wordpress.com/2013/09/192c8-merge-two-sorted-arrays-in-place.png\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5397090664522374258\" src=\"{{ site.baseurl }}/assets/192c8-merge-two-sorted-arrays-in-place.png?w=237\"/></a></p>\n<p>Code (C#):</p>\n<pre>// A1 and A2 are two sorted arrays. \n// A2 is not completely full (has empty slots at the end and are exactly the \n// size of A1)\n// the goal is to merge the two arrays in a sorted fashion\n\nvoid Merge(int[] A1, int[] A2)\n{\n   int count = FindCount(A2); // get the count of full slots\n   int i = A1.Length - 1;\n   int j = count - 1;\n   int k = A2.Length - 1;\n\n   for(;k&gt;=0;k--)\n   {\n      if(A1[i] &gt; A2[j] || j &lt; 0)\n      {\n         A2[k] =A1[i];\n         i--;\n      }\n      else\n      {\n         A2[k] = A2[j];\n         j--;\n      }\n   }\n}</pre>\n<p>END</p>","excerpt":"Question: There are two sorted arrays A1 and A2. Array A1 is full where as array A2 is partially empty and number of empty slots are just enough to accommodateâ€¦","frontmatter":{"date":"16 September, 2013","path":"/blog/2013-09-16-merge-2-sorted-arrays-one-has-empty-slots/","title":"[ARRAY] Merge 2 Sorted Arrays (one has empty slots)"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}