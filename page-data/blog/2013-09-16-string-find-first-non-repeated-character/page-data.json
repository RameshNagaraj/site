{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-16-string-find-first-non-repeated-character/","result":{"data":{"markdownRemark":{"html":"<p>Problem: Find the 1st non-repeated character in a string. Example: <em>teetotaller</em> The 1st non-repeated character is o.</p>\n<p>Solution: The solution involves keeping track of what characters in the string have a count of more than one. The choice of data structure we will use depends on the type of string. If the string is an ASCII string with 256 possible values then an array of size 256 would be sufficient to track the count of each character. But, if the string is a Unicode string with 65536 possible character values and the input string was a small string (few characters wide), using an array would be inefficient . In the case where our input string is relatively small and the character set is large we can use a HashTable instead. If the loading factor of the Hashtable was selected to be high (to save memory) it could potentially suffer from collisions, but since out string is small the chances of collisions are less. On the other hand if the string was a long string and the character set was small the array based solution would be more efficient memory wise.</p>\n<pre>// returns the index of the 1st non-repeated character in the input string\nint Find_First_Non_Repeated_Char(string s)\n{\n     Hashtable ht = new Hashtable();\n\n     // populate the hash table with count for each character in the string\n     for(int i=0; i&lt;s.Length; i++)\n     {\n        if(ht.Contains(s[i]))\n        {\n           int count = (int) ht[s[i]]; //get the count for the character\n           ht[s[i]] = ++count;\n        }\n        else\n        {\n           ht[s[i]] = 1;\n        }\n     }\n\n     // now go through the hash table one character at a time and find the  \n     // one that has a count of 1\n\n     for(int i=0; i&lt; s.Length; i++)\n     {\n        if(ht.Contains(s[i]) &amp;&amp; (int)ht[s[i]] == 1)\n        {\n           return i;\n        }\n     }\n     return -1; // the input does not contain non-repeated character\n}</pre>\n<p> </p>\n<p>END</p>","excerpt":"Problem: Find the 1st non-repeated character in a string. Example: teetotaller The 1st non-repeated character is o. Solution: The solution involves keeping…","frontmatter":{"date":"16 September, 2013","path":"/blog/2013-09-16-string-find-first-non-repeated-character/","title":"[STRING] Find First Non-Repeated Character"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}