{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-16-string-remove-specified-characters/","result":{"data":{"markdownRemark":{"html":"<p>Problem: You are given 2 strings. The first string is the input string that needs to be cleaned (in place) and the second string contains characters that need to be removed from the the first string. For example if string1 = \"teetotaller\" and removeString= \"ae\" then the output (cleaned string) will look like \"ttotllr\".<br>\nSolution:<br>\nThe naive approach is as follows:</p>\n<ul>\n<li>Create an output buffer the same size of string1.</li>\n<li>Loop through individual characters of string1 and check if they exist in the removeString.</li>\n<li>Copy a character to the output buffer only if it doesn't exist in removeString.</li>\n<li>Copy the contents of the output buffer to string1.</li>\n</ul>\n<p>This solution can certainly be improved to be faster. There are 2 things we can improve in the proposed solution.</p>\n<p>Improvement 1: The check to see if a character exists in the removeStr is O(m) where m is the size of the remove string. Hence the run time for loop from step 2 above is O(n * m).<br>\nIf the check is somehow made to perform in O(1), the run time would be O(n). O(1) lookup can be done using a Hashtable or a flag array. Both techniques are compared in the <a href=\"http://dev-interview-questions.blogspot.com/2008/12/find-first-nonrepeated-character-string.html\">Find First NonRepeated Character</a> post. In this solution we'll use the array approach. We will assume that the character set is 7 bit ASCII, which means that there are 128 possible characters. The array of bools will be used to determine if a character is to be removed or not. The ASCII code value of the character itself will be used as an index in to the array. For example if 'a' is one of the characters in the remove string then removeArray['a'] will be set to true (removeArray['a'] = true;).</p>\n<p>Improvement 2: The above proposed solution uses an output buffer to write the clean output characters to and then copies the output back to the original string. We don't really need the second buffer, if we just copy the characters to the input string instead of the output buffer. We will need to maintain a destination index to mark the spot where the next clean character needs to go. This improvement removes the need for the extra memory needed by the output buffer and also the need to copy it back to the original string.</p>\n<p>With the help of above two improvements the run time is O(n). We now need extra memory for the array but its constant (not tied to n).</p>\n<p>Improved Solution:</p>\n<ul>\n<li>Loop through individual characters of string1 and check if they exist in the removeString.</li>\n<li>Copy a character back to the input string only if it doesn't exist in removeString.</li>\n<li>Terminate the string with a NULLCHAR ('').</li>\n</ul>\n<pre>//Removes the specified characters from an input string\nvoid RemoveCharacters(char str[], char remove[])\n{\nint strLen = strlen(str);\nint removeStrLen = strlen(remove);\n\nbool removeCharacterFlags[128] = {false}; // assume ASCII character set\n\n// set the flag for characters present in the remove string\nfor(int i=0; i&lt;removeStrLen; i++)\n{\n    removeCharacterFlags[remove[i]] = true;\n}\n\nint destIndex = 0;      // index within the input string where the next\n                        // clean character will go.\nfor(int i=0; i&lt;strLen; i++)\n{\n    if(!removeCharacterFlags[str[i]])\n    {\n        str[destIndex++] = str[i];\n    }\n}\nstr[destIndex] = '';\n}</pre>\n<p>END</p>","excerpt":"Problem: You are given 2 strings. The first string is the input string that needs to be cleaned (in place) and the second string contains characters that needâ€¦","frontmatter":{"date":"16 September, 2013","path":"/blog/2013-09-16-string-remove-specified-characters/","title":"[STRING] Remove Specified Characters"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}