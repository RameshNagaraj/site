{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-16-string-reverse/","result":{"data":{"markdownRemark":{"html":"<p>Problem: Given a string of unknown length reverse it in place.</p>\n<p>Solution: Lets take a sample string \"hello\". When reversed it should read as \"olleh\". For those who are new to C/C++, a string has null terminator at the end. This null terminator denotes the end of the string. So, when you say declare a string in C language like: char *str = \"hello\";</p>\n<div>How many bytes of memory does it take to store that string? 5 (for the characters) +1 (for the null). The representation of the string in memory looks like this:<a href=\"https://rameshnagaraj.files.wordpress.com/2013/09/25649-string-representation-in-memory.png\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5278560831251389586\" src=\"{{ site.baseurl }}/assets/25649-string-representation-in-memory.png?w=151\"/></a></div>\n<p>Now, the reverse string should look like as shown below: <a href=\"https://rameshnagaraj.files.wordpress.com/2013/09/236c8-reversed-string.png\"><img alt=\"\" border=\"0\" id=\"BLOGGER_PHOTO_ID_5278651670248610850\" src=\"{{ site.baseurl }}/assets/236c8-reversed-string.png?w=147\"/></a>If you notice, we just need to swap the first and the last characters, the 2nd and the 2nd last, 3rd and 3rd last and so on.</p>\n<p>Code:</p>\n<pre>int main(int argc, char* argv[])\n{\n   char str[7] = \"hello\"; // create an array of characters of size 7\n                          // and assign the string hello to it.\n                          // Last char will be '' (null terminator)\n   printf(\"%s\", str);       // this will print hello\n   reverse(str);\n   printf(\"%s\", str);     // this will print olleh\n   return 0;\n}\n\nvoid reverse(char * str)\n{\n   char * begin = str;\n   char * end = str;\n\n   // position the end pointer at the last character\n   while(*(end+1) != NULL)\n   {\n       end++;\n   }\n\n   while(begin &lt; end) // as long as begin pointer is less than end pointer\n {\n  // swap the characters\n  char temp = *begin; \n  *begin = *end;\n  *end = temp;\n\n  begin++; //increment the begin ptr\n  end--;  //decrememnt the end pointer\n }\n}</pre>\n<p> </p>\n<p>END</p>","excerpt":"Problem: Given a string of unknown length reverse it in place. Solution: Lets take a sample string \"hello\". When reversed it should read as \"olleh\". For those…","frontmatter":{"date":"16 September, 2013","path":"/blog/2013-09-16-string-reverse/","title":"[STRING] Reverse"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}