{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-17-linked-list-detect-loop/","result":{"data":{"markdownRemark":{"html":"<p><span style=\"font-family:Arial;font-size:medium;\">The standard linear time solution for this is as follows:</span></p>\n<ul>\n<li><span style=\"font-family:Arial;font-size:medium;\">Take two pointers fast and slow </span></li>\n<li><span style=\"font-family:Arial;font-size:medium;\">Increment slow pointer by one node (node.next) and fast pointer by two nodes (node.next.next) </span></li>\n<li><span style=\"font-family:Arial;font-size:medium;\">If the two pointers merge at some point before the fast pointer reaches the end (this happens only if there is no loop), then there exists a loop in linked list </span></li>\n</ul>\n<p><span style=\"font-family:Arial;font-size:medium;\">For example consider the following linked list:</span></p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist1.jpeg\"><img alt=\"\" height=\"102\" src=\"{{ site.baseurl }}/assets/looplist1.jpeg?w=675&amp;h=153\" title=\"LoopList1\" width=\"450\"/></a></p>\n<p>Dry run for the above example:</p>\n<p>Take two pointers Fast and Slow. Initially both of them point to beginning of the linked list.</p>\n<p>Here in this example both points to 1. Increment slow pointer by one node (slow.next) and fast pointer by two nodes (fast.next.next). In this process if the linked list contains a loop, both of them meet at some point inside the loop.</p>\n<p><strong>Iteration 1:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist2.jpeg\"><img alt=\"\" height=\"185\" src=\"{{ site.baseurl }}/assets/looplist2.jpeg?w=675&amp;h=278\" title=\"LoopList2\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 2:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist3.jpeg\"><img alt=\"\" height=\"202\" src=\"{{ site.baseurl }}/assets/looplist3.jpeg?w=675&amp;h=303\" title=\"LoopList3\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 3:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist4.jpeg\"><img alt=\"\" height=\"202\" src=\"{{ site.baseurl }}/assets/looplist4.jpeg?w=675&amp;h=303\" title=\"LoopList4\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 4:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist5.jpeg\"><img alt=\"\" height=\"202\" src=\"{{ site.baseurl }}/assets/looplist5.jpeg?w=675&amp;h=303\" title=\"LoopList5\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 5:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist6.jpeg\"><img alt=\"\" height=\"190\" src=\"{{ site.baseurl }}/assets/looplist6.jpeg?w=675&amp;h=285\" title=\"LoopList6\" width=\"450\"/></a></strong></p>\n<p>Here both of them meet at node that contains data as 5. Hence there exists a loop in the linked list.</p>\n<p>The naive approach requires O(N^2) time and O(N) space. Basically you store all visited nodes, and compare each of them while traversing each node.</p>\n<p>The best solution runs in O(N) time and uses O(1) space. It uses two pointers (one slow pointer and one fast pointer). The slow pointer advances one node at a time, while the fast pointer traverses twice as fast. If the list has loop in it, eventually the fast and slow pointer will meet at the same node. On the other hand, if the loop has no loop, the fast pointer will reach the end of list before the slow pointer does.</p>\n<div id=\"codeSnippetWrapper\">\n<div id=\"codeSnippet\" style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\">\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum1\" style=\"color:#606060;\">   1:</span> <span style=\"color:#008000;\">/**</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum2\" style=\"color:#606060;\">   2:</span> <span style=\"color:#008000;\"> * Definition for singly-linked list.</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum3\" style=\"color:#606060;\">   3:</span> <span style=\"color:#008000;\"> * struct ListNode {</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum4\" style=\"color:#606060;\">   4:</span> <span style=\"color:#008000;\"> *     int val;</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum5\" style=\"color:#606060;\">   5:</span> <span style=\"color:#008000;\"> *     ListNode *next;</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum6\" style=\"color:#606060;\">   6:</span> <span style=\"color:#008000;\"> *     ListNode(int x) : val(x), next(NULL) {}</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum7\" style=\"color:#606060;\">   7:</span> <span style=\"color:#008000;\"> * };</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum8\" style=\"color:#606060;\">   8:</span> <span style=\"color:#008000;\"> */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum9\" style=\"color:#606060;\">   9:</span> <span style=\"color:#0000ff;\">class</span> Solution {</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum10\" style=\"color:#606060;\">  10:</span> <span style=\"color:#0000ff;\">public</span>:</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum11\" style=\"color:#606060;\">  11:</span>     <span style=\"color:#0000ff;\">bool</span> hasCycle(ListNode *head) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum12\" style=\"color:#606060;\">  12:</span>       ListNode * SlowPtr = head, * FastPtr = head ;</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum13\" style=\"color:#606060;\">  13:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum14\" style=\"color:#606060;\">  14:</span>       <span style=\"color:#0000ff;\">while</span> ( SlowPtr &amp;&amp; FastPtr &amp;&amp; FastPtr-&gt;next ) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum15\" style=\"color:#606060;\">  15:</span>           SlowPtr = SlowPtr-&gt;next ;</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum16\" style=\"color:#606060;\">  16:</span>           FastPtr = FastPtr-&gt;next-&gt;next ;</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum17\" style=\"color:#606060;\">  17:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum18\" style=\"color:#606060;\">  18:</span>           <span style=\"color:#0000ff;\">if</span> ( SlowPtr == FastPtr )</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum19\" style=\"color:#606060;\">  19:</span>             <span style=\"color:#0000ff;\">return</span> true ;</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum20\" style=\"color:#606060;\">  20:</span>       }</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum21\" style=\"color:#606060;\">  21:</span>       <span style=\"color:#0000ff;\">return</span> false ;</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum22\" style=\"color:#606060;\">  22:</span>     }</pre>\n<p><!--CRLF--></p>\n<pre style=\"text-align:left;line-height:12pt;background-color:#f4f4f4;margin:0;width:100%;font-family:'Courier New', courier, monospace;direction:ltr;color:black;font-size:8pt;overflow:visible;border-style:none;padding:0;\"><span id=\"lnum23\" style=\"color:#606060;\">  23:</span> };</pre>\n<p><!--CRLF--></p>\n</div>\n</div>","excerpt":"The standard linear time solution for this is as follows: Take two pointers fast and slow  Increment slow pointer by one node (node.next) and fast pointer by…","frontmatter":{"date":"17 September, 2013","path":"/blog/2013-09-17-linked-list-detect-loop/","title":"[Linked List] Detect Loop"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}