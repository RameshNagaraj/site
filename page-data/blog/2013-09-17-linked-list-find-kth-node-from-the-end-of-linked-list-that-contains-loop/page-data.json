{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-17-linked-list-find-kth-node-from-the-end-of-linked-list-that-contains-loop/","result":{"data":{"markdownRemark":{"html":"<p>In current post we discuss how to find k<sup>th</sup> node from end of the linked list that contains loop.</p>\n<p>Finding k<sup>th </sup>node from the end of single linked list that does not contain loop is pretty much easy. Take two pointers one at the head of the list and one at k nodes from the head of the list. Traverse both the pointers simultaneously one at a time, by the time second pointer reaches end of the list, first pointer will be at k<sup>th</sup> position from the end of the list. Or if we know the length of the list in hand, traverse n-k nodes from the head of the list which gives k<sup>th</sup> node.</p>\n<p>Following is the procedure to be followed to find kth node from the end of the linked list that contains a loop:</p>\n<ul>\n<li>From previous post we know the loop detection node, merging point node, loop length and length of the list</li>\n<li>If loop length >= k, we need to traverse loop length – k nodes from the merging point node</li>\n<li>If loop length &#x3C; k, we need to traverse length of list – k nodes from the head of linked list</li>\n</ul>\n<p>Consider the following list that contains loop:</p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist1.jpeg\"><img alt=\"\" height=\"102\" src=\"{{ site.baseurl }}/assets/looplist1.jpeg?w=675&amp;h=153\" title=\"LoopList1\" width=\"450\"/></a></p>\n<p>Dry run for the above example:</p>\n<p>From previous posts, we know how to calculate merging point node, length of the loop and length of the list.</p>\n<p>Consider the following figure:</p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist18.jpeg\"><img alt=\"\" height=\"179\" src=\"{{ site.baseurl }}/assets/looplist18.jpeg?w=675&amp;h=269\" title=\"LoopList18\" width=\"450\"/></a></p>\n<p>To find 2<sup>nd</sup> node from the end of the list:</p>\n<p>Here loopLength (4) > k (2).</p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist19.jpeg\"><img alt=\"\" height=\"205\" src=\"{{ site.baseurl }}/assets/looplist19.jpeg?w=675&amp;h=308\" title=\"LoopList19\" width=\"450\"/></a></p>\n<p>To find 5<sup>th</sup> node from the end of the list:</p>\n<p>Here loopLength (4) &#x3C; k (5).</p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist20.jpeg\"><img alt=\"\" height=\"208\" src=\"{{ site.baseurl }}/assets/looplist20.jpeg?w=675&amp;h=312\" title=\"LoopList20\" width=\"450\"/></a></p>\n<p>Implementation for class ListNode and class SingleLinkedList is given in the<a href=\"http://crackinterviewtoday.wordpress.com/2010/03/16/loop-in-a-linked-list/\"> previous post.</a></p>\n<p>Code for the above solution is as follows:</p>\n<div>\n<div id=\"highlighter_870633\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>1</div>\n<div>2</div>\n<div>3</div>\n<div>4</div>\n<div>5</div>\n<div>6</div>\n<div>7</div>\n<div>8</div>\n<div>9</div>\n<div>10</div>\n<div>11</div>\n<div>12</div>\n<div>13</div>\n<div>14</div>\n<div>15</div>\n<div>16</div>\n<div>17</div>\n<div>18</div>\n<div>19</div>\n<div>20</div>\n<div>21</div>\n<div>22</div>\n<div>23</div>\n<div>24</div>\n<div>25</div>\n<div>26</div>\n<div>27</div>\n<div>28</div>\n<div>29</div>\n<div>30</div>\n<div>31</div>\n<div>32</div>\n<div>33</div>\n<div>34</div>\n<div>35</div>\n<div>36</div>\n<div>37</div>\n<div>38</div>\n<div>39</div>\n<div>40</div>\n<div>41</div>\n<div>42</div>\n<div>43</div>\n<div>44</div>\n<div>45</div>\n<div>46</div>\n<div>47</div>\n<div>48</div>\n<div>49</div>\n<div>50</div>\n<div>51</div>\n<div>52</div>\n<div>53</div>\n<div>54</div>\n<div>55</div>\n<div>56</div>\n<div>57</div>\n<div>58</div>\n<div>59</div>\n<div>60</div>\n<div>61</div>\n<div>62</div>\n<div>63</div>\n<div>64</div>\n<div>65</div>\n<div>66</div>\n<div>67</div>\n<div>68</div>\n<div>69</div>\n<div>70</div>\n<div>71</div>\n<div>72</div>\n<div>73</div>\n<div>74</div>\n<div>75</div>\n<div>76</div>\n<div>77</div>\n<div>78</div>\n<div>79</div>\n<div>80</div>\n<div>81</div>\n<div>82</div>\n<div>83</div>\n<div>84</div>\n<div>85</div>\n<div>86</div>\n<div>87</div>\n<div>88</div>\n<div>89</div>\n<div>90</div>\n<div>91</div>\n<div>92</div>\n<div>93</div>\n<div>94</div>\n<div>95</div>\n<div>96</div>\n<div>97</div>\n<div>98</div>\n<div>99</div>\n<div>100</div>\n<div>101</div>\n<div>102</div>\n<div>103</div>\n<div>104</div>\n<div>105</div>\n<div>106</div>\n<div>107</div>\n<div>108</div>\n<div>109</div>\n<div>110</div>\n<div>111</div>\n<div>112</div>\n<div>113</div>\n<div>114</div>\n<div>115</div>\n<div>116</div>\n<div>117</div>\n<div>118</div>\n<div>119</div>\n<div>120</div>\n<div>121</div>\n<div>122</div>\n<div>123</div>\n<div>124</div>\n<div>125</div>\n<div>126</div>\n<div>127</div>\n<div>128</div>\n<div>129</div>\n<div>130</div>\n<div>131</div>\n<div>132</div>\n<div>133</div>\n<div>134</div>\n<div>135</div>\n<div>136</div>\n<div>137</div>\n<div>138</div>\n<div>139</div>\n<div>140</div>\n<div>141</div>\n<div>142</div>\n<div>143</div>\n<div>144</div>\n<div>145</div>\n<div>146</div>\n<div>147</div>\n<div>148</div>\n<div>149</div>\n<div>150</div>\n</td>\n<td>\n<div>\n<div><code>package</code> <code>ds;</code></div>\n<div></div>\n<div><code>public</code> <code>class</code> <code>KthNodeFromEndOfLoopedList</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>KthNodeFromEndOfLoopedList()</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>ListNode returnLoopDetectionNode(ListNode loopedList)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode fastNode = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode slowNode = loopedList;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code> <code>(fastNode.next.next != </code><code>null</code><code>)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>slowNode = slowNode.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>fastNode = fastNode.next.next;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(slowNode == fastNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>break</code><code>;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>slowNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>int</code> <code>getLoopLength(ListNode loopDetectionNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Take two pointers at loop detection node and calculate loop length</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P1 = loopDetectionNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P2 = loopDetectionNode;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>loopLength = </code><code>1</code><code>;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>do</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>loopLength++;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P2 = P2.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code> <code>(P1 != P2);</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>(loopLength - </code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>ListNode getMergingPointNode(ListNode loopedList,</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopDetectionNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P1 = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P2 = loopDetectionNode;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code> <code>(P1 != P2)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P1 = P1.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P2 = P2.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>P1;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>int</code> <code>getMergingPointLength(ListNode loopedList,</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopDetectionNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P1 = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P2 = loopDetectionNode;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Calculate length till the merging point</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>length = </code><code>1</code><code>;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code> <code>(P1 != P2)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P1 = P1.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P2 = P2.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>length++;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>(length - </code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>// Need to find kth node from end of linked list that contains loop</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>k = </code><code>2</code><code>;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>SingleLinkedList newList = </code><code>new</code> <code>SingleLinkedList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>2</code><code>);</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopNode = newList.add(</code><code>3</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>4</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>5</code><code>);</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode endNode = newList.add(</code><code>6</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Creating a loop</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>endNode.next = loopNode;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopedList = newList.getList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>KthNodeFromEndOfLoopedList kthNodeList = </code><code>new</code> <code>KthNodeFromEndOfLoopedList();</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopDetectionNode = kthNodeList.returnLoopDetectionNode(loopedList);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>loopLength = kthNodeList.getLoopLength(loopDetectionNode);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>lengthTillMergingPoint = kthNodeList.getMergingPointLength(loopedList,</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>loopDetectionNode);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>lengthOfList = loopLength + lengthTillMergingPoint;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(k &amp;gt; lengthOfList)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>System.out.println(</code><code>\"Cannot find kth in the linked list\"</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>else</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(loopLength &amp;gt;= k)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Need to traverse (loopLength-k nodes from mergingPointNode to get kth Node from end of the list)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode mergingPointNode = kthNodeList.getMergingPointNode(loopedList,</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>loopDetectionNode);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode kthNode = mergingPointNode;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>for</code> <code>(</code><code>int</code> <code>i = </code><code>0</code><code>; i &lt; (loopLength - k); i++)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(kthNode != </code><code>null</code><code>)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>kthNode = kthNode.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>System.out.println(</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>\"Kth Node from end of linked list that contains loop is \"</code> <code>+</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>kthNode.data);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>else</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Need to traverse (lengthOfList-k nodes from head of the list to get kth Node from end of the list)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode kthNode = loopedList;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>for</code> <code>(</code><code>int</code> <code>i = </code><code>0</code><code>; i &lt; (lengthOfList - k); i++)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code> <code>(kthNode != </code><code>null</code><code>)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>kthNode = kthNode.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>System.out.println(</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>\"Kth Node from end of linked list that contains loop is \"</code> <code>+</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>kthNode.data);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>}</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p> </p>\n<p>END</p>","excerpt":"In current post we discuss how to find kth node from end of the linked list that contains loop. Finding kth node from the end of single linked list that does…","frontmatter":{"date":"17 September, 2013","path":"/blog/2013-09-17-linked-list-find-kth-node-from-the-end-of-linked-list-that-contains-loop/","title":"[Linked List] Find kth Node from the end of Linked List that contains Loop"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}