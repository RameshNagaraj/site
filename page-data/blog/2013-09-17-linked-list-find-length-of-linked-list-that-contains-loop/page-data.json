{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-17-linked-list-find-length-of-linked-list-that-contains-loop/","result":{"data":{"markdownRemark":{"html":"<p>In current post we discuss how to calculate length of the linked list when there is a loop in the linked list.</p>\n<p>Following procedure explains how to calculate length of the linked list that contains loop:</p>\n<ul>\n<li>Use the standard fast and slow pointer algorithm discussed in <a href=\"http://crackinterviewtoday.wordpress.com/2010/03/16/loop-in-a-linked-list/\">previous post</a> to find the loop detection point</li>\n<li>Take two pointers P1 and P2 at loop detection point. Place pointer P1 at the same place and move P2 forward one step at a time. Repeat until both the pointers meet together. Keep a count variable incremented for every iteration which gives length of the loop. Let say the length is L1</li>\n<li>Again take two pointers P1 and P2. P1 at the head of the linked list and P2 at the loop detection point. Forward both the pointers one step at a time. Repeat until both the pointers meet together. This procedure is equivalent to the one we use to calculate node that causes loop in a linked list. Keep a count variable incremented for every iteration which gives the length of the list until the merging point. Let say the length is L2</li>\n<li>Now the length of the list that contains loop is L1+ L2</li>\n</ul>\n<p>Consider the following list that contains loop:</p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist1.jpeg\"><img alt=\"\" height=\"102\" src=\"{{ site.baseurl }}/assets/looplist1.jpeg?w=675&amp;h=153\" title=\"LoopList1\" width=\"450\"/></a></p>\n<p>Dry run for the above example:</p>\n<p>To calculate loop length:</p>\n<p><strong>Iteration 1:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist10.jpeg\"><img alt=\"\" height=\"192\" src=\"{{ site.baseurl }}/assets/looplist10.jpeg?w=675&amp;h=288\" title=\"LoopList10\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 2:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist11.jpeg\"><img alt=\"\" height=\"163\" src=\"{{ site.baseurl }}/assets/looplist11.jpeg?w=675\" title=\"LoopList11\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 3:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist12.jpeg\"><img alt=\"\" height=\"241\" src=\"{{ site.baseurl }}/assets/looplist12.jpeg?w=675&amp;h=362\" title=\"LoopList12\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 4:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist13.jpeg\"><img alt=\"\" height=\"241\" src=\"{{ site.baseurl }}/assets/looplist13.jpeg?w=675&amp;h=362\" title=\"LoopList13\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 5:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist14.jpeg\"><img alt=\"\" height=\"192\" src=\"{{ site.baseurl }}/assets/looplist14.jpeg?w=675\" title=\"LoopList14\" width=\"450\"/></a></strong></p>\n<p>From the above it is clear that loop length, L1 is 4.</p>\n<p>To calculate length of the list until merging point:</p>\n<p><strong>Iteration 1:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist15.jpeg\"><img alt=\"\" height=\"208\" src=\"{{ site.baseurl }}/assets/looplist15.jpeg?w=675&amp;h=312\" title=\"LoopList15\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 2:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist16.jpeg\"><img alt=\"\" height=\"208\" src=\"{{ site.baseurl }}/assets/looplist16.jpeg?w=675&amp;h=312\" title=\"LoopList16\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 3:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist17.jpeg\"><img alt=\"\" height=\"199\" src=\"{{ site.baseurl }}/assets/looplist17.jpeg?w=675\" title=\"LoopList17\" width=\"450\"/></a></strong></p>\n<p>From the above it is clear that the length of the loop till merging point, L2 is 2.</p>\n<p>Therefore the length of the list that contains loop is L1 + L2 = 4 + 2 = 6</p>\n<p>Implementation for class ListNode and class SingleLinkedList is given in the<a href=\"http://crackinterviewtoday.wordpress.com/2010/03/16/loop-in-a-linked-list/\"> previous post.</a></p>\n<p>Code for the above solution is as follows:</p>\n<div>\n<div id=\"highlighter_794905\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>1</div>\n<div>2</div>\n<div>3</div>\n<div>4</div>\n<div>5</div>\n<div>6</div>\n<div>7</div>\n<div>8</div>\n<div>9</div>\n<div>10</div>\n<div>11</div>\n<div>12</div>\n<div>13</div>\n<div>14</div>\n<div>15</div>\n<div>16</div>\n<div>17</div>\n<div>18</div>\n<div>19</div>\n<div>20</div>\n<div>21</div>\n<div>22</div>\n<div>23</div>\n<div>24</div>\n<div>25</div>\n<div>26</div>\n<div>27</div>\n<div>28</div>\n<div>29</div>\n<div>30</div>\n<div>31</div>\n<div>32</div>\n<div>33</div>\n<div>34</div>\n<div>35</div>\n<div>36</div>\n<div>37</div>\n<div>38</div>\n<div>39</div>\n<div>40</div>\n<div>41</div>\n<div>42</div>\n<div>43</div>\n<div>44</div>\n<div>45</div>\n<div>46</div>\n<div>47</div>\n<div>48</div>\n<div>49</div>\n<div>50</div>\n<div>51</div>\n<div>52</div>\n<div>53</div>\n<div>54</div>\n<div>55</div>\n<div>56</div>\n<div>57</div>\n<div>58</div>\n<div>59</div>\n<div>60</div>\n<div>61</div>\n<div>62</div>\n<div>63</div>\n<div>64</div>\n<div>65</div>\n<div>66</div>\n<div>67</div>\n<div>68</div>\n<div>69</div>\n<div>70</div>\n<div>71</div>\n<div>72</div>\n<div>73</div>\n<div>74</div>\n<div>75</div>\n<div>76</div>\n<div>77</div>\n<div>78</div>\n<div>79</div>\n<div>80</div>\n<div>81</div>\n<div>82</div>\n<div>83</div>\n<div>84</div>\n<div>85</div>\n<div>86</div>\n<div>87</div>\n<div>88</div>\n<div>89</div>\n<div>90</div>\n</td>\n<td>\n<div>\n<div><code>package</code> <code>ds;</code></div>\n<div>&nbsp;</div>\n<div><code>public</code> <code>class</code> <code>LengthOfLoopedList</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>LengthOfLoopedList()</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>ListNode returnLoopDetectionNode(ListNode loopedList)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode fastNode = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode slowNode = loopedList;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code><code>(fastNode.next.next != </code><code>null</code><code>)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>slowNode = slowNode.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>fastNode = fastNode.next.next;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code><code>(slowNode == fastNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>break</code><code>;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>slowNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>int</code> <code>getLoopLength(ListNode loopDetectionNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Take two pointers at loop detection node and calculate loop length</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P1 = loopDetectionNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P2 = loopDetectionNode;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>loopLength = </code><code>1</code><code>;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>do</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>loopLength++;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P2 = P2.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code><code>while</code><code>(P1 != P2);</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>(loopLength - </code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>int</code> <code>getMergingPointLength(ListNode loopedList, ListNode loopDetectionNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P1 = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P2 = loopDetectionNode;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Calculate length till the merging point</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>length = </code><code>1</code><code>;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code><code>(P1 != P2)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P1 = P1.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P2 = P2.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>length ++;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>(length - </code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>SingleLinkedList newList = </code><code>new</code> <code>SingleLinkedList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>2</code><code>);</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopNode = newList.add(</code><code>3</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>4</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>5</code><code>);</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode endNode = newList.add(</code><code>6</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Creating a loop</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>endNode.next = loopNode;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopedList = newList.getList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>LengthOfLoopedList lengthLoopedList = </code><code>new</code> <code>LengthOfLoopedList();</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Assuming there is a loop in linked list and finding loop detection node</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Loop detection node is the one where slow pointer and fast pointer meet</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopDetectionNode = lengthLoopedList.returnLoopDetectionNode(loopedList);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>loopLength = lengthLoopedList.getLoopLength(loopDetectionNode);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>lengthTillMergingPoint = lengthLoopedList.getMergingPointLength(loopedList, loopDetectionNode);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>int</code> <code>lengthOfList = loopLength + lengthTillMergingPoint;</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>System.out.println(</code><code>\"Length of the linked list that contains a loop is&nbsp; \"</code><code>+ lengthOfList);</code></div>\n<div>&nbsp;</div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div>&nbsp;</div>\n<div><code>}</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p> </p>\n<p>END</p>","excerpt":"In current post we discuss how to calculate length of the linked list when there is a loop in the linked list. Following procedure explains how to calculate…","frontmatter":{"date":"17 September, 2013","path":"/blog/2013-09-17-linked-list-find-length-of-linked-list-that-contains-loop/","title":"[Linked List] Find Length of Linked List that contains Loop"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}