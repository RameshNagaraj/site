{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-17-linked-list-find-loop-node/","result":{"data":{"markdownRemark":{"html":"<p>In this post we will discuss how to find the node that causes loop in linked list.</p>\n<p>Following procedure explains on how to detect node that caused loop:</p>\n<ul>\n<li>By following the procedure described in <a href=\"http://crackinterviewtoday.wordpress.com/2010/03/16/loop-in-a-linked-list/\" target=\"_blank\">previous post</a> (Slow pointer and fast pointer approach),Â  we found the loop detection node</li>\n<li>Now take pointers P1 and P2, P1 at the loop detection node and P2 starting from head of the linked list</li>\n<li>Traverse both the pointers one at a time</li>\n<li>Both the pointers meet at the node because of which there is a loop in the linked list</li>\n</ul>\n<p>For example consider the following linked list where the loop is detected at node 5:</p>\n<p><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist6.jpeg\"><img alt=\"\" height=\"190\" src=\"{{ site.baseurl }}/assets/looplist6.jpeg?w=675&amp;h=285\" title=\"LoopList6\" width=\"450\"/></a></p>\n<p>Dry run for the above example:</p>\n<p>Take two pointers P1 and P2 pointing to node 1(head of the linked list) and node 5(loop detection point) respectively.</p>\n<p><strong>Iteration 1:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist7.jpeg\"><img alt=\"\" height=\"210\" src=\"{{ site.baseurl }}/assets/looplist7.jpeg?w=675&amp;h=315\" title=\"LoopList7\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 2:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist8.jpeg\"><img alt=\"\" height=\"208\" src=\"{{ site.baseurl }}/assets/looplist8.jpeg?w=675&amp;h=312\" title=\"LoopList8\" width=\"450\"/></a></strong></p>\n<p><strong>Iteration 3:</strong></p>\n<p><strong><a href=\"http://crackinterviewtoday.files.wordpress.com/2010/03/looplist9.jpeg\"><img alt=\"\" height=\"208\" src=\"{{ site.baseurl }}/assets/looplist9.jpeg?w=675&amp;h=312\" title=\"LoopList9\" width=\"450\"/></a></strong></p>\n<p>Here both of them meet at node that contains data as 3. Hence the node that causes loop in a linked list is node 3.</p>\n<p>The following program finds out the node that causes loop:</p>\n<div>\n<div id=\"highlighter_324851\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>1</div>\n<div>2</div>\n<div>3</div>\n<div>4</div>\n<div>5</div>\n<div>6</div>\n<div>7</div>\n<div>8</div>\n<div>9</div>\n<div>10</div>\n<div>11</div>\n<div>12</div>\n<div>13</div>\n<div>14</div>\n<div>15</div>\n<div>16</div>\n<div>17</div>\n<div>18</div>\n<div>19</div>\n<div>20</div>\n<div>21</div>\n<div>22</div>\n<div>23</div>\n<div>24</div>\n<div>25</div>\n<div>26</div>\n<div>27</div>\n<div>28</div>\n<div>29</div>\n<div>30</div>\n<div>31</div>\n<div>32</div>\n<div>33</div>\n<div>34</div>\n<div>35</div>\n<div>36</div>\n<div>37</div>\n<div>38</div>\n<div>39</div>\n<div>40</div>\n<div>41</div>\n<div>42</div>\n<div>43</div>\n<div>44</div>\n<div>45</div>\n<div>46</div>\n<div>47</div>\n<div>48</div>\n<div>49</div>\n<div>50</div>\n<div>51</div>\n<div>52</div>\n<div>53</div>\n<div>54</div>\n<div>55</div>\n<div>56</div>\n<div>57</div>\n<div>58</div>\n<div>59</div>\n<div>60</div>\n</td>\n<td>\n<div>\n<div><code>package</code> <code>ds;</code></div>\n<div></div>\n<div><code>public</code> <code>class</code> <code>MergePointInLoopedList </code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>MergePointInLoopedList()</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>ListNode returnLoopDetectionNode(ListNode loopedList)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode fastNode = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode slowNode = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code><code>(fastNode.next.next != </code><code>null</code><code>)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>slowNode = slowNode.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>fastNode = fastNode.next.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>if</code><code>(slowNode == fastNode)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>break</code><code>;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>return</code> <code>slowNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>SingleLinkedList newList = </code><code>new</code> <code>SingleLinkedList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>1</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>2</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopNode = newList.add(</code><code>3</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>4</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>newList.add(</code><code>5</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode endNode = newList.add(</code><code>6</code><code>);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Creating a loop</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>endNode.next = loopNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopedList = newList.getList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>MergePointInLoopedList mergePointLoopedList = </code><code>new</code> <code>MergePointInLoopedList();</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Assuming there is a loop in linked list and finding loop detection node</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Loop detection node is the one where slow pointer and fast pointer meet</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode loopDetectionNode = mergePointLoopedList.returnLoopDetectionNode(loopedList);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>//&nbsp; Now take pointers P1 and P2. Let P2 be at loop detection node and P1 be at the head</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>// of the looped linked list</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P1 = loopedList;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>ListNode P2 = loopDetectionNode;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>while</code><code>(P1 != P2)</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P1 = P1.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>P2 = P2.next;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>System.out.println(</code><code>\"Merging point in linked list that has a loop is ... \"</code><code>+ P1.data);</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>}</code></div>\n<div></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>END</p>","excerpt":"In this post we will discuss how to find the node that causes loop in linked list. Following procedure explains on how to detect node that caused loop: Byâ¦","frontmatter":{"date":"17 September, 2013","path":"/blog/2013-09-17-linked-list-find-loop-node/","title":"[Linked List] Find Loop Node"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}