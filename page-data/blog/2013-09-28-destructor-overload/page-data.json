{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-28-destructor-overload/","result":{"data":{"markdownRemark":{"html":"<h2>Can I overload the destructor for my class?</h2>\n<p>No. Destructors never have parameters or return values.</p>\n<p>And you're not supposed to call destructors explicitly, so you couldn't use parameters or return values anyway.</p>\n<p>You can't. There is only one destructor per class in C++.</p>\n<p>What you can do is make a private destructor and then have several public methods which call the destructor in new and interesting ways.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class Foo {\n  ~Foo() { ... }\npublic:\n  DestroyFoo(int) { ... };\n  DestroyFoo(std::string) { ... }\n};</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Overloading means having several functions with the same name which take different arguments. Like<code class=\"language-text\">swap(int &amp;amp;a, int &amp;amp;b)</code> and <code class=\"language-text\">swap(double &amp;amp;a, double &amp;amp;b)</code>. A destructor takes no arguments. Overloading it would not make sense.</p>\n<p>Constructor<br>\n Constructors have the same name as the<br>\nclass.<br>\n Constructors do not return a value.<br>\n The constructor, like all functions, can be<br>\noverloaded with each constructor having a<br>\ndifferent set of parameters.</p>\n<p>Destructor<br>\n Destructors have the same name as the class<br>\nbut preceded with a ~.<br>\n Destructors do not return a value.<br>\n Destructors take no arguments and cannot be<br>\noverloaded.<br>\n Destructors are used for cleaning up object data<br>\n/ state<br>\n Allocated memory<br>\n Close files<br>\n Close network connections, etc.</p>\n<p> </p>\n<p>Constructor Summary<br>\nDate d1(3, 10, 2002); // constructor called<br>\nDate d2, d5; // default constructor called<br>\nDate d3 (d2); // copy constructor called<br>\nDate d4 = d1; // copy constructor called<br>\nd5 = d2; // assignment operator called.</p>\n<p>END</p>","excerpt":"Can I overload the destructor for my class? No. Destructors never have parameters or return values. And you're not supposed to call destructors explicitly, so…","frontmatter":{"date":"28 September, 2013","path":"/blog/2013-09-28-destructor-overload/","title":"Destructor Overload"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}