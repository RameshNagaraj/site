{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-09-28-self-objects/","result":{"data":{"markdownRemark":{"html":"<p>A class declaration can contain static object of self type, it can also have pointer to self type, but it cannot have a non-static object of self type.</p>\n<p>For example, following program works fine.</p>\n<div>\n<div id=\"highlighter_584725\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>\n<div><code>// A class can have a static member of self type</code></div>\n<div><code>#include&lt;iostream&gt;</code></div>\n<div></div>\n<div><code>using</code> <code>namespace</code> <code>std;</code></div>\n<div></div>\n<div><code>class</code> <code>Test {</code></div>\n<div><code>&nbsp;&nbsp;</code><code>static</code> <code>Test self;&nbsp; </code><code>// works fine</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>/* other stuff in class*/</code></div>\n<div></div>\n<div><code>};</code></div>\n<div></div>\n<div><code>int</code> <code>main()</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>Test t;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>getchar</code><code>();</code></div>\n<div><code>&nbsp;&nbsp;</code><code>return</code> <code>0;</code></div>\n<div><code>}</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>And following program also works fine.</p>\n<div>\n<div id=\"highlighter_221553\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>\n<div><code>// A class can have a pointer to self type</code></div>\n<div><code>#include&lt;iostream&gt;</code></div>\n<div></div>\n<div><code>using</code> <code>namespace</code> <code>std;</code></div>\n<div></div>\n<div><code>class</code> <code>Test {</code></div>\n<div><code>&nbsp;&nbsp;</code><code>Test * self; </code><code>//works fine</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>/* other stuff in class*/</code></div>\n<div></div>\n<div><code>};</code></div>\n<div></div>\n<div><code>int</code> <code>main()</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>Test t;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>getchar</code><code>();</code></div>\n<div><code>&nbsp;&nbsp;</code><code>return</code> <code>0;</code></div>\n<div><code>}</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>But following program generates compilation error “<em>field `self’ has incomplete type</em>”</p>\n<div>\n<div id=\"highlighter_127721\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>\n<div><code>// A class cannot have non-static object(s) of self type.</code></div>\n<div><code>#include&lt;iostream&gt;</code></div>\n<div></div>\n<div><code>using</code> <code>namespace</code> <code>std;</code></div>\n<div></div>\n<div><code>class</code> <code>Test {</code></div>\n<div><code>&nbsp;&nbsp;</code><code>Test self; </code><code>// Error</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>/* other stuff in class*/</code></div>\n<div></div>\n<div><code>};</code></div>\n<div></div>\n<div><code>int</code> <code>main()</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>Test t;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>getchar</code><code>();</code></div>\n<div><code>&nbsp;&nbsp;</code><code>return</code> <code>0;</code></div>\n<div><code>}</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p>If a non-static object is member then declaration of class is incomplete and compiler has no way to find out size of the objects of the class.<br>\nStatic variables do not contribute to the size of objects. So no problem in calculating size with static variables of self type.<br>\nFor a compiler, all pointers have a fixed size irrespective of the data type they are pointing to, so no problem with this also.</p>\n<p>We use static member of self type for implement \"singleton design pattern\".</p>\n<p>You <em>can</em> have a <strong>pointer</strong> or a <strong>reference</strong> to another instance of the container class.</p>\n<p>It is impossible because at the time when data member b is being declared type Base is not defined yet.</p>\n<p>You can only do this:</p>\n<div>\n<table>\n<tbody>\n<tr>\n<td>\n<pre><code>1\n2\n3\n4\n</code></pre>\n</td>\n<td>\n<pre><code><var>class</var> Base\n{\n    Base* b;\n};</code></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>But careful, if you do this, you'll have infinite recursion:</p>\n<div>\n<table>\n<tbody>\n<tr>\n<td>\n<pre><code>1\n2\n3\n4\n5\n6\n</code></pre>\n</td>\n<td>\n<pre><code><var>class</var> Base\n{\n    Base* b;\n<var>public</var>:\n    Base() : b(<var>new</var> Base() ) {}\n};</code></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>END</p>","excerpt":"A class declaration can contain static object of self type, it can also have pointer to self type, but it cannot have a non-static object of self type. For…","frontmatter":{"date":"28 September, 2013","path":"/blog/2013-09-28-self-objects/","title":"Self Objects"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}