{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-10-02-delete-this/","result":{"data":{"markdownRemark":{"html":"<p><code class=\"language-text\">delete this</code> is legal and does what you would expect: it calls your class's destructor and free the underlying memory. After <code class=\"language-text\">delete this</code> returns, your <code class=\"language-text\">this</code> pointer value does <em>not</em> change, so it is now a dangling pointer that should <em>not</em> be dereferenced. That includes implicit dereferencing using the class's member variables.</p>\n<p>It is usually found in reference-counted classes that, when the ref-count is decremented to 0, the<code class=\"language-text\">DecrementRefCount()</code>/<code class=\"language-text\">Release()</code>/whatever member function calls <code class=\"language-text\">delete this</code>.</p>\n<p><code class=\"language-text\">delete this</code> is typically considered very bad form for many reasons. It is easy to accidentally access member variables after <code class=\"language-text\">delete this</code>. Caller code might not realize your object has self-destructed.</p>\n<p>Also, <code class=\"language-text\">delete this</code> is a \"code smell\" that your code might not have a symmetric strategy for object ownership (who allocates and who deletes).</p>\n<p> </p>\n<p>It is risky for one additional reason that hasn't been mentioned yet - you are assuming that the object has been allocated on the heap. This can be difficult to guarantee, although in the case of reference counting implementations isn't generally a problem.</p>\n<p> </p>\n<p>As long as you're careful, it's OK for an object to commit suicide (<tt>delete</tt> <tt>this</tt>).</p>\n<p>Here's how I define \"careful\":</p>\n<ol>\n<li>You must be absolutely 100% positively sure that <tt>this</tt> object was allocated via <tt>new</tt> (not by <tt>new[]</tt>, nor by [None](<a href=\"http://www.parashift.com/c++-faq-lite/placement-new.html\">http://www.parashift.com/c++-faq-lite/placement-new.html</a> \"[11.10] What is \"placement new\" and why would I use it?\"), nor a local object on the stack, nor a global, nor a member of another object; but by plain ordinary<tt>new</tt>).</li>\n<li>You must be absolutely 100% positively sure that your member function will be the last member function invoked on <tt>this</tt> object.</li>\n<li>You must be absolutely 100% positively sure that the rest of your member function (after the <tt>delete</tt> <tt>this</tt> line) doesn't touch any piece of <tt>this</tt> object (including calling any other member functions or touching any data members).</li>\n<li>You must be absolutely 100% positively sure that no one even touches the <tt>this</tt> pointer itself after the <tt>delete</tt> <tt>this</tt> line. In other words, you must not examine it, compare it with another pointer, compare it with <tt>NULL</tt>, print it, cast it, do anything with it.</li>\n</ol>\n<p>Naturally the usual caveats apply in cases where your <tt>this</tt> pointer is a pointer to a base class when you don't have a virtual destructor.</p>\n<p> </p>\n<p>Yes, <code class=\"language-text\">delete this;</code> has defined results, as long as (as you've noted) you assure the object was allocated dynamically, and (of course) never attempt to use the object after it's destroyed.</p>\n<p> </p>\n<p>Well, in Component Object Model (COM) <code class=\"language-text\">delete this</code> construction can be a part of <code class=\"language-text\">Release</code>method that is called whenever you want to release aquisited object:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">void IMyInterface::Release()\n{\n    --instanceCount;\n    if(instanceCount == 0)\n        delete this;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> \n </p>\n<p>Why would anyone want to do this?\", and I thought that I might provide an example usage that I am considering this afternoon.</p>\n<p>Legacy code. Uses naked pointers Obj*obj with a delete obj at the end.</p>\n<p>Unfortunately I need sometimes, not often, to keep the object alive longer.</p>\n<p>I am considering making it a reference counted smart pointer. But there would be <em>lots</em> of code to change, if I was to use <code class=\"language-text\">ref_cnt_ptr&amp;lt;Obj&amp;gt;</code> everywhere. And if you mix naked Obj* and ref_cnt_ptr, you can get the object implicitly deleted when the last ref_cnt_ptr goes away, even though there are Obj* still alive.</p>\n<p>So I am thinking about creating an explicit_delete_ref_cnt_ptr. I.e. a reference counted pointer where the delete is only done in an explicit delete routine. Using it in the one place where the existing code knows the lifetime of the object, as well as in my new code that keeps the object alive longer.</p>\n<p>Incrementing and decrementing the reference count as explicit_delete_ref_cnt_ptr get manipulated.</p>\n<p>But NOT freeing when the reference count is seen to be zero in the explicit_delete_ref_cnt_ptr destructor.</p>\n<p>Only freeing when the reference count is seen to be zero in an explicit delete-like operation. E.g. in something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">template&amp;lt;typename T&amp;gt; class explicit_delete_ref_cnt_ptr { \n private: \n   T* ptr;\n   int rc;\n   ...\n public: \n   void delete_if_rc0() {\n      if( this-&amp;gt;ptr ) {\n        this-&amp;gt;rc--;\n        if( this-&amp;gt;rc == 0 ) {\n           delete this-&amp;gt;ptr;\n        }\n        this-&amp;gt;ptr = 0;\n      }\n    }\n };</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>OK, something like that. It's a bit unusual to have a reference counted pointer type not automatically delete the object pointed to in the rc'ed ptr destructor. But it seems like this might make mixing naked pointers and rc'ed pointers a bit safer.</p>\n<p>But so far no need for delete this.</p>\n<p>But then it occurred to me: if the object pointed to, the pointee, knows that it is being reference counted, e.g. if the count is inside the object (or in some other table), then the routine delete_if_rc0 could be a method of the pointee object, not the (smart) pointer.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class Pointee { \n private: \n   int rc;\n   ...\n public: \n   void delete_if_rc0() {\n        this-&amp;gt;rc--;\n        if( this-&amp;gt;rc == 0 ) {\n           delete this;\n        }\n      }\n    }\n };</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Actually, it doesn't need to be a member method at all, but could be a free function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">map&amp;lt;void*,int&amp;gt; keepalive_map;\ntemplate&amp;lt;typename T&amp;gt;\nvoid delete_if_rc0(T*ptr) {\n        void* tptr = (void*)ptr;\n        if( keepalive_map[tptr] == 1 ) {\n           delete ptr;\n        }\n};</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>(BTW, I know the code is not quite right - it becomes less readable if I add all the details, so I am leaving it like this.)</p>\n<p> </p>\n<p>Ideally <em>delete </em>operator should not be used for <em>this </em>pointer. However, if used, then following points must be considered.</p>\n<p>1) <em>delete </em>operator works only for objects allocated using operator <em>new</em> (See <a href=\"http://geeksforgeeks.org/?p=8539\">http://geeksforgeeks.org/?p=8539</a>). If the object is created using new, then we can do <em>delete this</em>, otherwise behavior is undefined.</p>\n<div>\n<div id=\"highlighter_37910\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>\n<div><code>class</code> <code>A</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>public</code><code>:</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>void</code> <code>fun()</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>{</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>delete</code> <code>this</code><code>;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>};</code></div>\n<div></div>\n<div><code>int</code> <code>main()</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>/* Following is Valid */</code></div>\n<div><code>&nbsp;&nbsp;</code><code>A *ptr = </code><code>new</code> <code>A;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>ptr-&gt;fun();</code></div>\n<div><code>&nbsp;&nbsp;</code><code>ptr = NULL </code><code>// make ptr NULL to make sure that things are not accessed using ptr. </code></div>\n<div></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>/* And following is Invalid: Undefined Behavior */</code></div>\n<div><code>&nbsp;&nbsp;</code><code>A a;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>a.fun();</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;</code><code>getchar</code><code>();</code></div>\n<div><code>&nbsp;&nbsp;</code><code>return</code> <code>0;</code></div>\n<div><code>}</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<ol start=\"2\">\n<li>Once <em>delete this </em>is done, any member of the deleted object should not be accessed after deletion.</li>\n</ol>\n<div>\n<div id=\"highlighter_11532\">\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tbody>\n<tr>\n<td>\n<div>\n<div><code>#include&lt;iostream&gt;</code></div>\n<div><code>using</code> <code>namespace</code> <code>std;</code></div>\n<div></div>\n<div><code>class</code> <code>A</code></div>\n<div><code>{</code></div>\n<div><code>&nbsp;&nbsp;</code><code>int</code> <code>x;</code></div>\n<div><code>&nbsp;&nbsp;</code><code>public</code><code>:</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>A() { x = 0;}</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>void</code> <code>fun() {</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>delete</code> <code>this</code><code>;</code></div>\n<div></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>/* Invalid: Undefined Behavior */</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code>cout&lt;&lt;x;</code></div>\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;</code><code>}</code></div>\n<div><code>};</code></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<p> </p>\n<p><strong>The best thing is to not do <em>delete this </em>at all.</strong></p>\n<p>Thanks to <a href=\"http://geeksforgeeks.org/forum/topic/can-we-use-delete-operator-in-c-for-this-pointer#post-6353\">Shekhu </a>for providing above details.</p>\n<p>References:<br>\n<a href=\"https://www.securecoding.cert.org/confluence/display/cplusplus/OOP05-CPP.+Avoid+deleting+this\">https://www.securecoding.cert.org/confluence/display/cplusplus/OOP05-CPP.+Avoid+deleting+this</a><br>\n<a href=\"http://en.wikipedia.org/wiki/This_%28computer_science%29\">http://en.wikipedia.org/wiki/This_%28computer_science%29</a></p>\n<p> </p>\n<p>END</p>","excerpt":"is legal and does what you would expect: it calls your class's destructor and free the underlying memory. After  returns, your  pointer value does not change…","frontmatter":{"date":"02 October, 2013","path":"/blog/2013-10-02-delete-this/","title":"Delete this"},"fields":{"readingTime":{"text":"6 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}