{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-10-07-tcpip-socket-workflow/","result":{"data":{"markdownRemark":{"html":"<h4>Socket Workflow</h4>\n<p>To establish TCP connections the server host calls <tt>socket()</tt> to create a listening socket then specifies the IP address and TCP port on which the server will receive connection requests with a call to <tt>bind()</tt>. Calling <tt>listen()</tt> puts the server into listening mode which then blocks on the <tt>accept()</tt> waiting for incoming connections.</p>\n<p><a href=\"http://vichargrave.com/wp-content/uploads/2013/01/Socket-Workflow.png\"><img alt=\"\" src=\"{{ site.baseurl }}/assets/Socket-Workflow.png\" title=\"Socket Workflow\" width=\"100%\"/></a></p>\n<p>The client connects to the server by calling <tt>socket()</tt> then <tt>connect()</tt> with a socket address that includes the IP address and TCP port specifying used for the <tt>bind()</tt> call on the server. On the server the <tt>accept()</tt> function returns with a connection socket descriptor when the client’s connection request is received.</p>\n<p>After connecting the server blocks on a call to <tt>read()</tt> waiting for a client request. The client calls <tt>write()</tt> to send a request then blocks on a call to <tt>read()</tt> waiting for the server’s response. When the server is done processing the request, it sends back a response to the client. The exchange of requests and responses repeats until the client is done, at which time it closes the connection. The server detects this event when <tt>read()</tt> returns 0. The server responds by closing its end of the connection then returning to get another connection.</p>\n<p>In most servers connections are accepted in one thread and a new thread or process is created to handle each connection. To keep things simple the example here describes an iterative server where each request is handled one at a time.</p>\n<p>END</p>","excerpt":"Socket Workflow To establish TCP connections the server host calls socket() to create a listening socket then specifies the IP address and TCP port on which the…","frontmatter":{"date":"07 October, 2013","path":"/blog/2013-10-07-tcpip-socket-workflow/","title":"TCP/IP Socket Workflow"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}