{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-10-16-stl-maps-with-user-defined-objects/","result":{"data":{"markdownRemark":{"html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;map&amp;gt;\n\nusing namespace std;\n\nclass A\n{\npublic:\n    A(int id): id(id)\n    { };\n\nprivate:\n    int id;\n};\n\nint main()\n{\n    A a(1) ;\n\n    map&amp;lt; A, int&amp;gt; m ;\n    m[a] = 123 ;\n\n    return 0;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> </p>\n<p>The above code throws the error:</p>\n<p><span style=\"color:#ff0000;\">stl_function.h:237:22: error: no match for 'operator&#x3C;' in '__x &#x3C; __y'</span></p>\n<p> </p>\n<p>Method-1: (Overload the <code class=\"language-text\">operator &amp;lt;</code> )</p>\n<p><span style=\"font-style:inherit;line-height:1.625;\">You need to define </span><code style=\"font-style:inherit;\">operator &#x3C;</code><span style=\"font-style:inherit;line-height:1.625;\"> for the class A. Because Keys must be comparable.</span></p>\n<p>The only requirement is that <code class=\"language-text\">Compare</code> (which defaults to <code class=\"language-text\">less&amp;lt;Key&amp;gt;</code>, which defaults to using <code class=\"language-text\">operator&amp;lt;</code> to compare keys) must be a \"strict weak ordering\".</p>\n<p>Map needs to compare the values using operator &#x3C; and hence you need to provide the same when user defined class are used as key.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">    bool operator &amp;lt;(const A&amp;amp; rhs) \n    {\n        return id &amp;lt; rhs.id;\n    }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The above code throws the error:</p>\n<p><span style=\"color:#ff0000;\">stl_function.h:237:22: error: passing 'const A' as 'this' argument of 'bool A::operator&#x3C;(const A&#x26;)' discards qualifiers [-fpermissive]</span></p>\n<p> </p>\n<p>The stl container map is an ordered collection of pairs, and the<br>\ndefault ordering is done using the function object less(). This<br>\nfunction object defines operator() by taking two const references and<br>\ncompares them using corresponding operator&#x3C;. Hence, when you invoke<br>\n\"find\"/insert/[] on m, the less() function eventually calls Point::operator&#x3C;()<br>\nand the arguments that it passes are const references. Hence<br>\nPoint::operator&#x3C;() must be declared <strong>const</strong>.</p>\n<pre><code>    bool operator &lt;(const A&amp; rhs) <strong>const</strong>\n    {\n        return id &lt; rhs.id;\n    }</code></pre>\n<p> </p>\n<p>Method-2: (Providing a functor)</p>\n<p>You don't <em>have</em> to define <code class=\"language-text\">operator&amp;lt;</code> for your class, actually. You can also make a comparator function object class for it, and use that to specialize <code class=\"language-text\">std::map (the third template argument of the map can be changed)</code>. To extend your example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">struct ClassACompare\n{\n   bool operator() (const A&amp;amp; lhs, const A&amp;amp; rhs)\n   {\n       return lhs.id &amp;lt; rhs.id;\n   }\n};\n\nstd::map&amp;lt;Class1, int, ClassACompare&amp;gt; c2int;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It just so happens that the default for the third template parameter of <code class=\"language-text\">std::map</code> is <a href=\"http://en.cppreference.com/w/cpp/utility/functional/less\" rel=\"nofollow\"><code class=\"language-text\">std::less</code></a>, which will delegate to <code class=\"language-text\">operator&amp;lt;</code> defined for your class (and fail if there is none). But sometimes you want objects to be usable as map keys, but you do not actually have any <em>meaningful</em> comparison semantics, and so you don't want to confuse people by providing <code class=\"language-text\">operator&amp;lt;</code> on your class just for that. If that's the case, you can use the above trick.</p>\n<p>Method-3: (Specializing <code class=\"language-text\">std::less for class A)</code></p>\n<p>Yet another way to achieve the same is to specialize <code class=\"language-text\">std::less</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">namespace std\n{\n    template&amp;lt;&amp;gt; struct less&amp;lt;A&amp;gt;\n    {\n       bool operator() (const A&amp;amp; lhs, const A&amp;amp; rhs) const\n       {\n           return lhs.id &amp;lt; rhs.id;\n       }\n    }\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The advantage of this is that it will be picked by <code class=\"language-text\">std::map</code> \"by default\", and yet you do not expose <code class=\"language-text\">operator&amp;lt;</code>to client code otherwise.</p>\n<p>Note: For Inserting into map use the make_pair:</p>\n<p>m.insert ( make_pair&#x3C;A,int>(obj1, 1)); OR</p>\n<p>m.insert ( std::map &#x3C;A,int>::value_type (obj1,1)) ;</p>\n<p>END</p>","excerpt":"The above code throws the error: stl_function.h:237:22: error: no match for 'operator<' in '__x < __y'   Method-1: (Overload the  ) You need to define operator…","frontmatter":{"date":"15 October, 2013","path":"/blog/2013-10-16-stl-maps-with-user-defined-objects/","title":"STL maps with user-defined objects"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}