{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-11-04-llarbitrary-linked-list/","result":{"data":{"markdownRemark":{"html":"<h4>Copy a linked list with next and arbit pointer</h4>\n<p>You are given a Double Link List with one pointer of each node pointing to the next node just like in a single link list. The second pointer however CAN point to any node in the list and not just the previous node. Now write a program in__ O(n) time __to duplicate this list. That is, write a program which will create a copy of this list.</p>\n<p>Let us call the second pointer as arbit pointer as it can point to any arbitrary node in the linked list.</p>\n<img alt=\"ArbitLinked List1\" height=\"160\" src=\"{{ site.baseurl }}/assets/ArbitLinked-List12.gif\" title=\"ArbitLinked List1\" width=\"450\"/>\n<p>Arbitrary pointers are shown in red and next pointers in black</p>\n<p>Figure 1</p>\n<p><strong>Method 1 (Uses O(n) extra space)</strong><br>\nThis method stores the next and arbitrary mappings (of original list) in an array first, then modifies the original Linked List (to create copy), creates a copy. And finally restores the original list.</p>\n<ol>\n<li>Create all nodes in copy linked list using next pointers.  </li>\n<li>Store the node and its next pointer mappings of original linked list.  </li>\n<li>Change next pointer of all nodes in original linked list to point to the corresponding node in copy linked list.<br>\nFollowing diagram shows status of both Linked Lists after above 3 steps. The red arrow shows arbit pointers and black arrow shows next pointers.</li>\n</ol>\n<img alt=\"ArbitLinked List2\" height=\"200\" src=\"{{ site.baseurl }}/assets/ArbitLinked-List2.gif\" title=\"ArbitLinked List2\" width=\"450\"/>\n<p>Figure 2</p>\n<ol start=\"4\">\n<li>Change the arbit pointer of all nodes in copy linked list to point to corresponding node in original linked list.  </li>\n<li>Now construct the arbit pointer in copy linked list as below and restore the next pointer of nodes in the original linked list.</li>\n</ol>\n<pre>       copy_list_node-&gt;arbit =\n                      copy_list_node-&gt;arbit-&gt;arbit-&gt;next;\n       copy_list_node = copy_list_node-&gt;next;</pre>\n<ol start=\"6\">\n<li>Restore the next pointers in original linked list from the stored mappings(in step 2).</li>\n</ol>\n<p>Time Complexity:  O(n)<br>\nAuxiliary Space:  O(n)</p>\n<p><strong>Method 2 (Uses Constant Extra Space)</strong><br>\nThanks to Saravanan Mani for providing this solution. This solution works using constant space.  </p>\n<ol>\n<li>Create the copy of node 1 and insert it between node 1 &#x26; node 2 in original Linked List, create the copy of 2 and insert it between 2 &#x26; 3.. Continue in this fashion, add the copy of N afte the Nth node  </li>\n<li>Now copy the arbitrary link in this fashion</li>\n</ol>\n<pre>     original-&gt;next-&gt;arbitrary = original-&gt;arbitrary-&gt;next;  /*TRAVERSE \nTWO NODES*/</pre>\n<p>This works because original->next is nothing but copy of original and Original->arbitrary->next is nothing but copy of arbitrary.  </p>\n<ol start=\"3\">\n<li>Now restore the original and copy linked lists in this fashion in a single loop.</li>\n</ol>\n<pre>     original-&gt;next = original-&gt;next-&gt;next;\n     copy-&gt;next = copy-&gt;next-&gt;next;</pre>\n<ol start=\"4\">\n<li>Make sure that last element of original->next is NULL.</li>\n</ol>\n<p>Time Complexity: O(n)<br>\nAuxiliary Space: O(1)</p>","excerpt":"Copy a linked list with next and arbit pointer You are given a Double Link List with one pointer of each node pointing to the next node just like in a single…","frontmatter":{"date":"04 November, 2013","path":"/blog/2013-11-04-llarbitrary-linked-list/","title":"[Linked List]Arbitrary Linked List"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}