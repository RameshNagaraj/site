{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-01-20-array-balanced-parentheses-in-an-expression/","result":{"data":{"markdownRemark":{"html":"<p>Given an expression string exp, write a program to examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[\",\"]” are correct in exp. For example, the program should print true for exp = “[()]{}{[()()]()}” and false for exp = “[(])”</p>\n<p>Algorithm:  </p>\n<ol>\n<li>Declare a character stack S.  </li>\n<li>Now traverse the expression string exp.<br>\na) If the current character is a starting bracket (‘(‘ or ‘{‘ or ‘[') then push it to stack.<br>\nb) If the current character is a closing bracket (')' or '}' or ']‘) then pop from stack and if the popped character is the matching starting bracket then fine else parenthesis are not balanced.  </li>\n<li>After complete traversal, if there is some starting bracket left in stack then “not balanced”</li>\n</ol>\n<p> </p>\n<p>Time Complexity: O(n)<br>\nAuxiliary Space: O(n) for stack.</p>\n<p> </p>\n<div id=\"codeSnippetWrapper\">\n<div id=\"codeSnippet\" style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\">\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum1\" style=\"color:#606060;\">   1:</span> #include&lt;stdio.h&gt;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum2\" style=\"color:#606060;\">   2:</span> #include&lt;stdlib.h&gt;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum3\" style=\"color:#606060;\">   3:</span> <span style=\"color:#cc6633;\">#define</span> <span style=\"color:#0000ff;\">bool</span> <span style=\"color:#0000ff;\">int</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum4\" style=\"color:#606060;\">   4:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum5\" style=\"color:#606060;\">   5:</span> <span style=\"color:#008000;\">/* structure of a stack node */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum6\" style=\"color:#606060;\">   6:</span> <span style=\"color:#0000ff;\">struct</span> sNode</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum7\" style=\"color:#606060;\">   7:</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum8\" style=\"color:#606060;\">   8:</span>    <span style=\"color:#0000ff;\">char</span> data;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum9\" style=\"color:#606060;\">   9:</span>    <span style=\"color:#0000ff;\">struct</span> sNode *next;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum10\" style=\"color:#606060;\">  10:</span> };</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum11\" style=\"color:#606060;\">  11:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum12\" style=\"color:#606060;\">  12:</span> <span style=\"color:#008000;\">/* Function to push an item to stack*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum13\" style=\"color:#606060;\">  13:</span> <span style=\"color:#0000ff;\">void</span> push(<span style=\"color:#0000ff;\">struct</span> sNode** top_ref, <span style=\"color:#0000ff;\">int</span> new_data);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum14\" style=\"color:#606060;\">  14:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum15\" style=\"color:#606060;\">  15:</span> <span style=\"color:#008000;\">/* Function to pop an item from stack*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum16\" style=\"color:#606060;\">  16:</span> <span style=\"color:#0000ff;\">int</span> pop(<span style=\"color:#0000ff;\">struct</span> sNode** top_ref);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum17\" style=\"color:#606060;\">  17:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum18\" style=\"color:#606060;\">  18:</span> <span style=\"color:#008000;\">/* Returns 1 if character1 and character2 are matching left</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum19\" style=\"color:#606060;\">  19:</span> <span style=\"color:#008000;\">   and right Parenthesis */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum20\" style=\"color:#606060;\">  20:</span> <span style=\"color:#0000ff;\">bool</span> isMatchingPair(<span style=\"color:#0000ff;\">char</span> character1, <span style=\"color:#0000ff;\">char</span> character2)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum21\" style=\"color:#606060;\">  21:</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum22\" style=\"color:#606060;\">  22:</span>    <span style=\"color:#0000ff;\">if</span>(character1 == <span style=\"color:#006080;\">'('</span> &amp;&amp; character2 == <span style=\"color:#006080;\">')'</span>)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum23\" style=\"color:#606060;\">  23:</span>      <span style=\"color:#0000ff;\">return</span> 1;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum24\" style=\"color:#606060;\">  24:</span>    <span style=\"color:#0000ff;\">else</span> <span style=\"color:#0000ff;\">if</span>(character1 == <span style=\"color:#006080;\">'{'</span> &amp;&amp; character2 == <span style=\"color:#006080;\">'}'</span>)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum25\" style=\"color:#606060;\">  25:</span>      <span style=\"color:#0000ff;\">return</span> 1;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum26\" style=\"color:#606060;\">  26:</span>    <span style=\"color:#0000ff;\">else</span> <span style=\"color:#0000ff;\">if</span>(character1 == <span style=\"color:#006080;\">'['</span> &amp;&amp; character2 == <span style=\"color:#006080;\">']'</span>)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum27\" style=\"color:#606060;\">  27:</span>      <span style=\"color:#0000ff;\">return</span> 1;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum28\" style=\"color:#606060;\">  28:</span>    <span style=\"color:#0000ff;\">else</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum29\" style=\"color:#606060;\">  29:</span>      <span style=\"color:#0000ff;\">return</span> 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum30\" style=\"color:#606060;\">  30:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum31\" style=\"color:#606060;\">  31:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum32\" style=\"color:#606060;\">  32:</span> <span style=\"color:#008000;\">/*Return 1 if expression has balanced Parenthesis */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum33\" style=\"color:#606060;\">  33:</span> <span style=\"color:#0000ff;\">bool</span> areParenthesisBalanced(<span style=\"color:#0000ff;\">char</span> exp[])</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum34\" style=\"color:#606060;\">  34:</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum35\" style=\"color:#606060;\">  35:</span>    <span style=\"color:#0000ff;\">int</span> i = 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum36\" style=\"color:#606060;\">  36:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum37\" style=\"color:#606060;\">  37:</span>    <span style=\"color:#008000;\">/* Declare an empty character stack */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum38\" style=\"color:#606060;\">  38:</span>    <span style=\"color:#0000ff;\">struct</span> sNode *stack = NULL;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum39\" style=\"color:#606060;\">  39:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum40\" style=\"color:#606060;\">  40:</span>    <span style=\"color:#008000;\">/* Traverse the given expression to check matching parenthesis */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum41\" style=\"color:#606060;\">  41:</span>    <span style=\"color:#0000ff;\">while</span>(exp[i])</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum42\" style=\"color:#606060;\">  42:</span>    {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum43\" style=\"color:#606060;\">  43:</span>       <span style=\"color:#008000;\">/*If the exp[i] is a starting parenthesis then push it*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum44\" style=\"color:#606060;\">  44:</span>       <span style=\"color:#0000ff;\">if</span>(exp[i] == <span style=\"color:#006080;\">'{'</span> || exp[i] == <span style=\"color:#006080;\">'('</span> || exp[i] == <span style=\"color:#006080;\">'['</span>)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum45\" style=\"color:#606060;\">  45:</span>         push(&amp;stack, exp[i]);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum46\" style=\"color:#606060;\">  46:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum47\" style=\"color:#606060;\">  47:</span>       <span style=\"color:#008000;\">/* If exp[i] is a ending parenthesis then pop from stack and</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum48\" style=\"color:#606060;\">  48:</span> <span style=\"color:#008000;\">          check if the popped parenthesis is a matching pair*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum49\" style=\"color:#606060;\">  49:</span>       <span style=\"color:#0000ff;\">if</span>(exp[i] == <span style=\"color:#006080;\">'}'</span> || exp[i] == <span style=\"color:#006080;\">')'</span> || exp[i] == <span style=\"color:#006080;\">']'</span>)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum50\" style=\"color:#606060;\">  50:</span>       {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum51\" style=\"color:#606060;\">  51:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum52\" style=\"color:#606060;\">  52:</span>           <span style=\"color:#008000;\">/*If we see an ending parenthesis without a pair then return false*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum53\" style=\"color:#606060;\">  53:</span>          <span style=\"color:#0000ff;\">if</span>(stack == NULL)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum54\" style=\"color:#606060;\">  54:</span>            <span style=\"color:#0000ff;\">return</span> 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum55\" style=\"color:#606060;\">  55:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum56\" style=\"color:#606060;\">  56:</span>          <span style=\"color:#008000;\">/* Pop the top element from stack, if it is not a pair</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum57\" style=\"color:#606060;\">  57:</span> <span style=\"color:#008000;\">            parenthesis of character then there is a mismatch.</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum58\" style=\"color:#606060;\">  58:</span> <span style=\"color:#008000;\">            This happens for expressions like {(}) */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum59\" style=\"color:#606060;\">  59:</span>          <span style=\"color:#0000ff;\">else</span> <span style=\"color:#0000ff;\">if</span> ( !isMatchingPair(pop(&amp;stack), exp[i]) )</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum60\" style=\"color:#606060;\">  60:</span>            <span style=\"color:#0000ff;\">return</span> 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum61\" style=\"color:#606060;\">  61:</span>       }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum62\" style=\"color:#606060;\">  62:</span>       i++;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum63\" style=\"color:#606060;\">  63:</span>    }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum64\" style=\"color:#606060;\">  64:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum65\" style=\"color:#606060;\">  65:</span>    <span style=\"color:#008000;\">/* If there is something left in expression then there is a starting</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum66\" style=\"color:#606060;\">  66:</span> <span style=\"color:#008000;\">      parenthesis without a closing parenthesis */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum67\" style=\"color:#606060;\">  67:</span>    <span style=\"color:#0000ff;\">if</span>(stack == NULL)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum68\" style=\"color:#606060;\">  68:</span>      <span style=\"color:#0000ff;\">return</span> 1; <span style=\"color:#008000;\">/*balanced*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum69\" style=\"color:#606060;\">  69:</span>    <span style=\"color:#0000ff;\">else</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum70\" style=\"color:#606060;\">  70:</span>      <span style=\"color:#0000ff;\">return</span> 0;  <span style=\"color:#008000;\">/*not balanced*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum71\" style=\"color:#606060;\">  71:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum72\" style=\"color:#606060;\">  72:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum73\" style=\"color:#606060;\">  73:</span> <span style=\"color:#008000;\">/* UTILITY FUNCTIONS */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum74\" style=\"color:#606060;\">  74:</span> <span style=\"color:#008000;\">/*driver program to test above functions*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum75\" style=\"color:#606060;\">  75:</span> <span style=\"color:#0000ff;\">int</span> main()</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum76\" style=\"color:#606060;\">  76:</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum77\" style=\"color:#606060;\">  77:</span>   <span style=\"color:#0000ff;\">char</span> exp[100] = <span style=\"color:#006080;\">\"{()}[]\"</span>;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum78\" style=\"color:#606060;\">  78:</span>   <span style=\"color:#0000ff;\">if</span>(areParenthesisBalanced(exp))</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum79\" style=\"color:#606060;\">  79:</span>     printf(<span style=\"color:#006080;\">\"\\n Balanced \"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum80\" style=\"color:#606060;\">  80:</span>   <span style=\"color:#0000ff;\">else</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum81\" style=\"color:#606060;\">  81:</span>     printf(<span style=\"color:#006080;\">\"\\n Not Balanced \"</span>);  \\</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum82\" style=\"color:#606060;\">  82:</span>   getchar();</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum83\" style=\"color:#606060;\">  83:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum84\" style=\"color:#606060;\">  84:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum85\" style=\"color:#606060;\">  85:</span> <span style=\"color:#008000;\">/* Function to push an item to stack*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum86\" style=\"color:#606060;\">  86:</span> <span style=\"color:#0000ff;\">void</span> push(<span style=\"color:#0000ff;\">struct</span> sNode** top_ref, <span style=\"color:#0000ff;\">int</span> new_data)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum87\" style=\"color:#606060;\">  87:</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum88\" style=\"color:#606060;\">  88:</span>   <span style=\"color:#008000;\">/* allocate node */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum89\" style=\"color:#606060;\">  89:</span>   <span style=\"color:#0000ff;\">struct</span> sNode* new_node =</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum90\" style=\"color:#606060;\">  90:</span>             (<span style=\"color:#0000ff;\">struct</span> sNode*) malloc(<span style=\"color:#0000ff;\">sizeof</span>(<span style=\"color:#0000ff;\">struct</span> sNode));</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum91\" style=\"color:#606060;\">  91:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum92\" style=\"color:#606060;\">  92:</span>   <span style=\"color:#0000ff;\">if</span>(new_node == NULL)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum93\" style=\"color:#606060;\">  93:</span>   {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum94\" style=\"color:#606060;\">  94:</span>      printf(<span style=\"color:#006080;\">\"Stack overflow \\n\"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum95\" style=\"color:#606060;\">  95:</span>      getchar();</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum96\" style=\"color:#606060;\">  96:</span>      exit(0);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum97\" style=\"color:#606060;\">  97:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum98\" style=\"color:#606060;\">  98:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum99\" style=\"color:#606060;\">  99:</span>   <span style=\"color:#008000;\">/* put in the data  */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum100\" style=\"color:#606060;\"> 100:</span>   new_node-&gt;data  = new_data;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum101\" style=\"color:#606060;\"> 101:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum102\" style=\"color:#606060;\"> 102:</span>   <span style=\"color:#008000;\">/* link the old list off the new node */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum103\" style=\"color:#606060;\"> 103:</span>   new_node-&gt;next = (*top_ref);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum104\" style=\"color:#606060;\"> 104:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum105\" style=\"color:#606060;\"> 105:</span>   <span style=\"color:#008000;\">/* move the head to point to the new node */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum106\" style=\"color:#606060;\"> 106:</span>   (*top_ref)    = new_node;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum107\" style=\"color:#606060;\"> 107:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum108\" style=\"color:#606060;\"> 108:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum109\" style=\"color:#606060;\"> 109:</span> <span style=\"color:#008000;\">/* Function to pop an item from stack*/</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum110\" style=\"color:#606060;\"> 110:</span> <span style=\"color:#0000ff;\">int</span> pop(<span style=\"color:#0000ff;\">struct</span> sNode** top_ref)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum111\" style=\"color:#606060;\"> 111:</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum112\" style=\"color:#606060;\"> 112:</span>   <span style=\"color:#0000ff;\">char</span> res;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum113\" style=\"color:#606060;\"> 113:</span>   <span style=\"color:#0000ff;\">struct</span> sNode *top;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum114\" style=\"color:#606060;\"> 114:</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum115\" style=\"color:#606060;\"> 115:</span>   <span style=\"color:#008000;\">/*If stack is empty then error */</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum116\" style=\"color:#606060;\"> 116:</span>   <span style=\"color:#0000ff;\">if</span>(*top_ref == NULL)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum117\" style=\"color:#606060;\"> 117:</span>   {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum118\" style=\"color:#606060;\"> 118:</span>      printf(<span style=\"color:#006080;\">\"Stack overflow \\n\"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum119\" style=\"color:#606060;\"> 119:</span>      getchar();</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum120\" style=\"color:#606060;\"> 120:</span>      exit(0);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum121\" style=\"color:#606060;\"> 121:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum122\" style=\"color:#606060;\"> 122:</span>   <span style=\"color:#0000ff;\">else</span></pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum123\" style=\"color:#606060;\"> 123:</span>   {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum124\" style=\"color:#606060;\"> 124:</span>      top = *top_ref;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum125\" style=\"color:#606060;\"> 125:</span>      res = top-&gt;data;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum126\" style=\"color:#606060;\"> 126:</span>      *top_ref = top-&gt;next;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum127\" style=\"color:#606060;\"> 127:</span>      free(top);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum128\" style=\"color:#606060;\"> 128:</span>      <span style=\"color:#0000ff;\">return</span> res;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum129\" style=\"color:#606060;\"> 129:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum130\" style=\"color:#606060;\"> 130:</span> }</pre>\n<p><!--CRLF--></p>\n</div>\n</div>","excerpt":"Given an expression string exp, write a program to examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[\",\"]” are correct in exp. For example, the…","frontmatter":{"date":"20 January, 2014","path":"/blog/2014-01-20-array-balanced-parentheses-in-an-expression/","title":"[ARRAY] Balanced Parentheses in an Expression"},"fields":{"readingTime":{"text":"10 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}