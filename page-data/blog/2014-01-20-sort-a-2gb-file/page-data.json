{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-01-20-sort-a-2gb-file/","result":{"data":{"markdownRemark":{"html":"<p><span style=\"text-decoration:underline;\"><strong>External Sorting:</strong></span></p>\n<p>Given a huge file with 2GB size with one string per line.Which algorithm to be used to sort the file and why?<br>\n<span style=\"text-decoration:underline;\"><strong>Concept:</strong></span></p>\n<p>The catch here is \"2GB\" file. By saying \"2GB\", the question stresses that we cannot bring the entire data in memory at the same time. Therefore we will have to sort the data in chunks. This can be done by a class of sorting algorithms called external sorting. External sorting works as follows:<br>\nSuppose we have 200 MB of available memory,  </p>\n<ol>\n<li>Read 200 MB of data in main memory and sort it by some conventional method like quicksort in O(n log n).  </li>\n<li>Write the sorted data back to a temporary file on disk.  </li>\n<li>Repeat steps 1 and 2 until all the data is in sorted 200 MB chunks (2GB/200MB = 10 chunks). We will now merge these chunks into a single output file.  </li>\n<li>Read the first 15 MB of of each chunk (15*10 = 150 MB total) into input buffer in main memory and allocate remaining 50 MB for output buffer.  </li>\n<li>Perform a 10-way merge on the input buffer and store the result in the output buffer. If the output buffer is full, write it to the final sorted file on the disk and empty it. If any of the 10 input buffers get empty, fill it again with the next 20 MB of the associated 200 MB chunk until no more data from the chunk is available.</li>\n</ol>\n<p>One example of external sorting is the external merge sort algorithm, which sorts chunks that each fit in RAM, then merges the sorted chunks together. For example, for sorting 900 megabytes of data using only 100 megabytes of RAM:</p>\n<ol>\n<li>Read 100 MB of the data in main memory and sort by some conventional method, like quicksort.</li>\n<li>Write the sorted data to disk.</li>\n<li>Repeat steps 1 and 2 until all of the data is in sorted 100 MB chunks (there are 900MB / 100MB = 9 chunks), which now need to be merged into one single output file.</li>\n<li>Read the first 10 MB (= 100MB / (9 chunks + 1)) of each sorted chunk into input buffers in main memory and allocate the remaining 10 MB for an output buffer. (In practice, it might provide better performance to make the output buffer larger and the input buffers slightly smaller.)</li>\n<li>Perform a 9-way merge and store the result in the output buffer. Whenever the output buffer fills, write it to the final sorted file and empty it. Whenever any of the 9 input buffers empties, fill it with the next 10 MB of its associated 100 MB sorted chunk until no more data from the chunk is available. This is the key step that makes external merge sort work externally -- because the merge algorithm only makes one pass sequentially through each of the chunks, each chunk does not have to be loaded completely; rather, sequential parts of the chunk can be loaded as needed.</li>\n</ol>\n<p>Another Example:</p>\n<p>Imagine you have the numbers 1 - 9</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\">9  7  2  6  3  4  8  5  1</pre>\n</div>\n<p>And let's suppose that only 3 fit in memory at a time.</p>\n<p>So you'd break them into chunks of 3 and sort each, storing each result in a separate file:</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\">279\n346\n158</pre>\n</div>\n<p>Now you'd open each of the three files as streams and read the first value from each:</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\">2 3 1</pre>\n</div>\n<p>Output the lowest value <code class=\"language-text\">1</code>, and get the next value from that stream, now you have:</p>\n<div id=\"codeSnippetWrapper\">\n<pre id=\"codeSnippet\" style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\">2 3 5</pre>\n</div>\n<p>Output the next lowest value <code class=\"language-text\">2</code>, and continue onwards until you've outputted the entire sorted list.</p>\n<p><strong>External Sorting</strong>--This term is used to refer to sorting methods that are employed when the data to be sorted is too large to fit in primary memory.</p>\n<h4>Characteristics of External Sorting</h4>\n<ol>\n<li>During the sort, some of the data must be stored externally. Typically the data will be stored on tape or disk.</li>\n<li>The cost of accessing data is significantly greater than either bookkeeping or comparison costs.</li>\n<li>There may be severe restrictions on access. For example, if tape is used, items must be accessed sequentially.</li>\n</ol>\n<h4>Criteria for Developing an External Sorting Algorithm</h4>\n<ol>\n<li>Minimize number of times an item is accessed.</li>\n<li>Access items in sequential order</li>\n</ol>\n<hr>\n<h3>Sort Merge</h3>\n<p>Sort merge is the strategy of choice for external sorting because it:</p>\n<ol>\n<li>Accesses records sequentially</li>\n<li>Minimizes block accesses</li>\n<li>Gives a stable sort</li>\n</ol>\n<hr>\n<h3>Sort Merge Strategy</h3>\n<ol>\n<li>Divide the file into runs such that the size of a run is small enough to fit into main memory</li>\n<li>Sort each run in main memory using a fast in-memory sorting algorithm</li>\n<li>Merge the resulting runs together into successively bigger runs, until the file is sorted.</li>\n</ol>\n<hr>\n<h3>Balanced Multiway Merging</h3>\n<h4>Strategy</h4>\n<ol>\n<li>Select an equal number of I/O units (e.g., tapes, disks)</li>\n<li>Sort Step</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">*   Select half of the I/O units to be output files\n*   Using an in-memory sorting algorithm, create the initial runs and divide them evenly among the output files</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<ol start=\"3\">\n<li>Merge Step</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">*   __(a) __On each merge step, alternate the I/O units so that on one step, a unit is an input file and on the next step it is an output file\n*   __(b)__Read one run from each of the input files, merge the runs, and store the resulting run on an output file. Alternate output files so that the runs are evenly distributed on the output files.\n*   __(c)__Repeat step __b__ until all the runs on the input files have been merged.\n*   __(d)__Repeat steps __a-c__ until the file has been sorted</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>__Performance __</h4>\n<ol>\n<li>If M records can be sorted in-memory and the file consists of N records, then the number of initial runs is N / M.</li>\n<li>If there are 2P I/O units available, then the number of subsequent passes is ceiling(log<sub>P</sub>(N / M)) since each pass reduces the number of runs by P. Here ceiling(x) means the smallest integer greater than or equal to x.</li>\n</ol>\n<p><strong>If you have 1 million integers, how would you sort them efficiently? (modify a specific sorting algorithm to solve this).</strong></p>\n<p>You could easily sort 1 million integers in memory on an ordinary computer nowadays, this problem imposes artificial memory restrictions. The most suitable algorithm for this task is Merge Sort. We’ll have to modify it to sort chunks of data from the original file/input into memory and merge them with an already sorted file.</p>\n<p>Here’s an implementation in C++:</p>\n<div id=\"codeSnippetWrapper\">\n<div id=\"codeSnippet\" style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\">\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum1\" style=\"color:#606060;\">   1:</span> <span style=\"color:#0000ff;\">void</span> read_chunk(FILE* f, <span style=\"color:#0000ff;\">int</span>* v, <span style=\"color:#0000ff;\">int</span> &amp;n) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum2\" style=\"color:#606060;\">   2:</span>    <span style=\"color:#0000ff;\">int</span> k = 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum3\" style=\"color:#606060;\">   3:</span>    <span style=\"color:#0000ff;\">while</span>(!feof(f) &amp;&amp; k &lt; n) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum4\" style=\"color:#606060;\">   4:</span>      fscanf(f, <span style=\"color:#006080;\">\"%i\"</span>, v + k);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum5\" style=\"color:#606060;\">   5:</span>      k++;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum6\" style=\"color:#606060;\">   6:</span>    }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum7\" style=\"color:#606060;\">   7:</span>    n = k;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum8\" style=\"color:#606060;\">   8:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum9\" style=\"color:#606060;\">   9:</span> <span style=\"color:#0000ff;\">void</span> merge(<span style=\"color:#0000ff;\">int</span> * v, <span style=\"color:#0000ff;\">int</span> p, <span style=\"color:#0000ff;\">int</span> q) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum10\" style=\"color:#606060;\">  10:</span>   <span style=\"color:#0000ff;\">int</span>* c = <span style=\"color:#0000ff;\">new</span> <span style=\"color:#0000ff;\">int</span>[q - p + 1];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum11\" style=\"color:#606060;\">  11:</span>   <span style=\"color:#0000ff;\">int</span> mid = (p + q) / 2;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum12\" style=\"color:#606060;\">  12:</span>   <span style=\"color:#0000ff;\">int</span> i = p;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum13\" style=\"color:#606060;\">  13:</span>   <span style=\"color:#0000ff;\">int</span> j = mid + 1;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum14\" style=\"color:#606060;\">  14:</span>   <span style=\"color:#0000ff;\">int</span> k = 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum15\" style=\"color:#606060;\">  15:</span>   <span style=\"color:#0000ff;\">while</span> (i &lt;= mid &amp;&amp; j &lt;= q) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum16\" style=\"color:#606060;\">  16:</span>     <span style=\"color:#0000ff;\">if</span> (v[i] &lt; v[j]) c[k++] = v[i++];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum17\" style=\"color:#606060;\">  17:</span>     <span style=\"color:#0000ff;\">else</span> c[k++] = v[j++];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum18\" style=\"color:#606060;\">  18:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum19\" style=\"color:#606060;\">  19:</span>   <span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">int</span> t = i; t &lt;= mid; t++) c[k++] = v[t];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum20\" style=\"color:#606060;\">  20:</span>   <span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">int</span> t = j; t &lt;= q; t++) c[k++] = v[t];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum21\" style=\"color:#606060;\">  21:</span>   <span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">int</span> t = 0; t &lt; k; t++) v[p + t] = c[t];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum22\" style=\"color:#606060;\">  22:</span>   <span style=\"color:#0000ff;\">delete</span>[] c;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum23\" style=\"color:#606060;\">  23:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum24\" style=\"color:#606060;\">  24:</span> <span style=\"color:#0000ff;\">void</span> merge_sort(<span style=\"color:#0000ff;\">int</span>* v, <span style=\"color:#0000ff;\">int</span> p, <span style=\"color:#0000ff;\">int</span> q) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum25\" style=\"color:#606060;\">  25:</span>   <span style=\"color:#0000ff;\">if</span> (p &lt; q) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum26\" style=\"color:#606060;\">  26:</span>     <span style=\"color:#0000ff;\">int</span> mid = (p + q) / 2;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum27\" style=\"color:#606060;\">  27:</span>     merge_sort(v, p, mid);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum28\" style=\"color:#606060;\">  28:</span>     merge_sort(v, mid + 1, q);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum29\" style=\"color:#606060;\">  29:</span>     merge(v, p, q);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum30\" style=\"color:#606060;\">  30:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum31\" style=\"color:#606060;\">  31:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum32\" style=\"color:#606060;\">  32:</span> <span style=\"color:#0000ff;\">void</span> file_merge(<span style=\"color:#0000ff;\">int</span>* v, <span style=\"color:#0000ff;\">int</span> n, <span style=\"color:#0000ff;\">char</span>* filename) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum33\" style=\"color:#606060;\">  33:</span>   FILE* dest = fopen(<span style=\"color:#006080;\">\"temp_file\"</span>, <span style=\"color:#006080;\">\"w\"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum34\" style=\"color:#606060;\">  34:</span>   FILE* source = fopen(filename, <span style=\"color:#006080;\">\"r\"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum35\" style=\"color:#606060;\">  35:</span>   <span style=\"color:#0000ff;\">int</span> i = 0;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum36\" style=\"color:#606060;\">  36:</span>   <span style=\"color:#0000ff;\">int</span> a;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum37\" style=\"color:#606060;\">  37:</span>   <span style=\"color:#0000ff;\">bool</span> read = true;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum38\" style=\"color:#606060;\">  38:</span>   <span style=\"color:#0000ff;\">while</span>(!feof(source) &amp;&amp; i &lt; n) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum39\" style=\"color:#606060;\">  39:</span>     <span style=\"color:#0000ff;\">if</span> (read)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum40\" style=\"color:#606060;\">  40:</span>       fscanf(source, <span style=\"color:#006080;\">\"%i\"</span>, &amp;a);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum41\" style=\"color:#606060;\">  41:</span>     <span style=\"color:#0000ff;\">if</span> (a &lt; v[i]) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum42\" style=\"color:#606060;\">  42:</span>       fprintf(dest, <span style=\"color:#006080;\">\"\\n%i\"</span>, a);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum43\" style=\"color:#606060;\">  43:</span>       read = true;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum44\" style=\"color:#606060;\">  44:</span>     }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum45\" style=\"color:#606060;\">  45:</span>     <span style=\"color:#0000ff;\">else</span> {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum46\" style=\"color:#606060;\">  46:</span>       fprintf(dest, <span style=\"color:#006080;\">\"\\n%i\"</span>, v[i]);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum47\" style=\"color:#606060;\">  47:</span>       read = false;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum48\" style=\"color:#606060;\">  48:</span>       i++;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum49\" style=\"color:#606060;\">  49:</span>     }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum50\" style=\"color:#606060;\">  50:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum51\" style=\"color:#606060;\">  51:</span>   <span style=\"color:#0000ff;\">while</span>(!feof(source)) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum52\" style=\"color:#606060;\">  52:</span>     <span style=\"color:#0000ff;\">if</span> (read)</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum53\" style=\"color:#606060;\">  53:</span>      fscanf(source, <span style=\"color:#006080;\">\"%i\"</span>, &amp;a);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum54\" style=\"color:#606060;\">  54:</span>     read = true;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum55\" style=\"color:#606060;\">  55:</span>     fprintf(dest, <span style=\"color:#006080;\">\"\\n%i\"</span>, a);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum56\" style=\"color:#606060;\">  56:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum57\" style=\"color:#606060;\">  57:</span>   <span style=\"color:#0000ff;\">for</span> (<span style=\"color:#0000ff;\">int</span> k = i; k &lt; n; k++) fprintf(dest, <span style=\"color:#006080;\">\"\\n%i\"</span>, v[k]);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum58\" style=\"color:#606060;\">  58:</span>   fclose(source);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum59\" style=\"color:#606060;\">  59:</span>   fclose(dest);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum60\" style=\"color:#606060;\">  60:</span>   remove(filename);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum61\" style=\"color:#606060;\">  61:</span>   rename(<span style=\"color:#006080;\">\"temp_file\"</span>, filename);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum62\" style=\"color:#606060;\">  62:</span> }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum63\" style=\"color:#606060;\">  63:</span> <span style=\"color:#cc6633;\">#define</span> MAX_READ 10000</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum64\" style=\"color:#606060;\">  64:</span> <span style=\"color:#0000ff;\">void</span> sort(<span style=\"color:#0000ff;\">char</span>* filename) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum65\" style=\"color:#606060;\">  65:</span>   FILE* source = fopen(filename, <span style=\"color:#006080;\">\"r\"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum66\" style=\"color:#606060;\">  66:</span>   <span style=\"color:#0000ff;\">int</span> v[MAX_READ];</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum67\" style=\"color:#606060;\">  67:</span>   fclose(fopen(<span style=\"color:#006080;\">\"dest_temp_file\"</span>, <span style=\"color:#006080;\">\"w\"</span>));</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum68\" style=\"color:#606060;\">  68:</span>   <span style=\"color:#0000ff;\">while</span> (!feof(source)) {</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum69\" style=\"color:#606060;\">  69:</span>     <span style=\"color:#0000ff;\">int</span> n = MAX_READ;</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum70\" style=\"color:#606060;\">  70:</span>     read_chunk(source, v, n);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum71\" style=\"color:#606060;\">  71:</span>     merge_sort(v, 0, n - 1);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum72\" style=\"color:#606060;\">  72:</span>     file_merge(v, n, <span style=\"color:#006080;\">\"dest_temp_file\"</span>);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum73\" style=\"color:#606060;\">  73:</span>   }</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum74\" style=\"color:#606060;\">  74:</span>   fclose(source);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum75\" style=\"color:#606060;\">  75:</span>   remove(filename);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum76\" style=\"color:#606060;\">  76:</span>   rename(<span style=\"color:#006080;\">\"dest_temp_file\"</span>, filename);</pre>\n<p><!--CRLF--></p>\n<pre style=\"overflow:visible;font-size:8pt;font-family:'Courier New', courier, monospace;color:black;direction:ltr;text-align:left;margin:0;line-height:12pt;width:100%;background-color:#f4f4f4;border-style:none;padding:0;\"><span id=\"lnum77\" style=\"color:#606060;\">  77:</span> }</pre>\n<p><!--CRLF--></p>\n</div>\n</div>","excerpt":"External Sorting: Given a huge file with 2GB size with one string per line.Which algorithm to be used to sort the file and why? Concept: The catch here is \"2GB…","frontmatter":{"date":"20 January, 2014","path":"/blog/2014-01-20-sort-a-2gb-file/","title":"Sort a 2GB File"},"fields":{"readingTime":{"text":"12 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}