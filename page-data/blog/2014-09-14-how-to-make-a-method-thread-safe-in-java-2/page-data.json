{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-09-14-how-to-make-a-method-thread-safe-in-java-2/","result":{"data":{"markdownRemark":{"html":"<p>Interview Question:</p>\n<p>Is the following method thread-safe? How to make it thread-safe?</p>\n<div class=\"wp_syntax\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre class=\"java\">class MyCounter {\n\tprivate static int counter = 0;\n&nbsp;\n\tpublic static int getCount() {\n\t\treturn counter++;\n\t}\n}</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>This post explains a general interview question that has been asked by Google and a lot of companies. It's low-level and not about how to design concurrent program.</p>\n<p>First of all, the answer is NO. The method is not thread-safe, because the <em>counter++</em> operation is not atomic, which means it consists more than one atomic operations. In this case, one is accessing value and the other is increasing the value by one.</p>\n<img alt=\"thread-safe method\" class=\"alignnone size-full wp-image-11967\" height=\"280\" src=\"{{ site.baseurl }}/assets/thread-safe-method1.png\" width=\"400\"/>\n<p>When Thread 1 accesses the method at t1, Thread 2 may not be done with the method. So the value returned to Thread 1 is the value that has not been increased.</p>\n<p><strong>Make a method thread-safe - Method 1</strong></p>\n<p>Adding synchronized to this method will makes it thread-safe. When <em>synchronized</em> is added to a static method, the <em>Class</em> object is the object which is locked.</p>\n<p>Is marking it synchronized enough? The answer is YES.</p>\n<div class=\"wp_syntax\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre class=\"java\">class MyCounter {\n\tprivate static int counter = 0;\n&nbsp;\n\tpublic static synchronized int getCount() {\n\t\treturn counter++;\n\t}\n}</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>If the method is not static, then adding <em>synchronized</em> keyword willsynchronize the instance of the class, not the <em>Class</em> object.</p>\n<p><strong>Make a method thread-safe - Method 2</strong></p>\n<p>In this particular counter example, we actually can make <em>count++</em> atomic by using AtomicInteger from the package \"java.util.concurrent.atomic\".</p>\n<div class=\"wp_syntax\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre class=\"java\">import java.util.concurrent.atomic.AtomicInteger;\n&nbsp;\npublic class MyCounter {\n\tprivate static AtomicInteger counter = new AtomicInteger(0);\n&nbsp;\n\tpublic static int getCount() {\n\t\treturn counter.getAndIncrement();\n\t}\n}</pre>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>Some other useful facts about thread-safe</strong></p>\n<p>Local variables are thread safe in Java.</p>\n<p>Each thread has its own stack. Two different threads never shares the same stack. All local variables defined in a method will be allocated memory in stack. As soon as method execution is completed by the current thread, stack frame will be removed.</p>\n<p><a href=\"http://www.programcreek.com/2014/02/how-to-make-a-method-thread-safe-in-java/\">http://www.programcreek.com/2014/02/how-to-make-a-method-thread-safe-in-java/</a></p>","excerpt":"Interview Question: Is the following method thread-safe? How to make it thread-safe? This post explains a general interview question that has been asked byâ€¦","frontmatter":{"date":"14 September, 2014","path":"/blog/2014-09-14-how-to-make-a-method-thread-safe-in-java-2/","title":"How to make a method thread-safe in Java?"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}