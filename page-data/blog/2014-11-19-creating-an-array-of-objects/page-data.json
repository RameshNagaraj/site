{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-11-19-creating-an-array-of-objects/","result":{"data":{"markdownRemark":{"html":"<p>I have a class A for example -</p>\n<p>A[] arr = new A[4];<br>\nBut this is only creating pointers (references) to A and not 4 objects. Is this correct? I see that when I try to access functions/variables in the objects created I get a null pointer exception. To be able to manipulate/access the objects I had to do this --</p>\n<p>A[] arr = new A[4];<br>\nfor( int i=0; i&#x3C;4; i++ )<br>\narr[i] = new A();</p>\n<p>I find this odd because in C++ you just say new A[4] and it creates the four objects.</p>\n<p>This is correct.</p>\n<p>A[] a = new A[4];<br>\ncreates 4 A variables, similar to doing this</p>\n<p>A a1;<br>\nA a2;<br>\nA a3;<br>\nA a4;<br>\nnow you couldn't do a1.someMethod() without allocating a1 as</p>\n<p>a1 = new A();<br>\nsimilarly, with the array you need to do</p>\n<p>a[0] = new A();<br>\nbefore using it.</p>\n<p>The reason int works, but MyClass doesn't:</p>\n<p>From here:</p>\n<p>Data Type Default Value (for fields)<br>\nbyte 0<br>\nshort 0<br>\nint 0<br>\nlong 0L<br>\nfloat 0.0f<br>\ndouble 0.0d<br>\nchar '\\u0000'<br>\nString (or any object) null<br>\nboolean false<br>\nWhen you initialize an array, all elements take on the default value.</p>\n<p>So, when you initialize an int[], all elements are 0, so no problem using that or assigning a new value to it.</p>\n<p>But, when you initialize an MyClass[], all elements are null, which is a problem when you try to access a member of one of the elements.</p>\n<p>If you don't know why accessing a null object's members won't work, you probably need to take 2 steps back and read a Java book.</p>\n<p>Additional Note:</p>\n<p>Technically, this:</p>\n<p>int[] foo = new int[1];<br>\nfoo[0] = 0;<br>\nis actually more like this:</p>\n<p>MyClass[] foo = new MyClass[10];<br>\nfoo[0] = new MyClass();<br>\nnot:</p>\n<p>MyClass[] foo = new MyClass[10];<br>\nfoo[0].bar = 0;<br>\nsince you're assigning a new value to an element, rather than accessing a member of an element.</p>\n<p>No enclosing instance of type Test is accessible:</p>\n<p>The other answers cover that pretty well, and here are 3 related questions:</p>\n<p>No enclosing instance of type is accessible.</p>\n<p>No enclosing instance of type Server is accessible</p>\n<p>\"No enclosing instance of type\" error while calling method from another class in Android</p>","excerpt":"I have a class A for example - A[] arr = new A[4]; But this is only creating pointers (references) to A and not 4 objects. Is this correct? I see that when Iâ€¦","frontmatter":{"date":"19 November, 2014","path":"/blog/2014-11-19-creating-an-array-of-objects/","title":"Creating an Array of Objects"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}