{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2015-01-01-design-a-tiny-url-service/","result":{"data":{"markdownRemark":{"html":"<p>Redirect Part:</p>\n<p>When you click on a link of any tiny url, an HTTP Request is sent to their server with the full URL, like http // bit.ly / b9 (not a real one).</p>\n<p>They read the path part (here b9), which maps to their Database.</p>\n<p>In the Database, they find the real URL. Then they issue a redirect, which is a HTTP 302 response and the target URL in the header.</p>\n<p>Encoding Part:</p>\n<p>One of the most popular URL shortening services simply take the ID in the database of the URL and then convert it to Base 62[a-zA-Z0-9].</p>\n<p>import static org.testing.AssertJUnit.assertEquals ;</p>\n<p>public class TinyURL {<br>\nprivate static final String ALPHABET_MAP = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" ;<br>\nprivate static final int BASE = ALPHABET_MAP.length() ;</p>\n<p>public static String encode ( int IndexNum ) {<br>\nStringBuilder sb = new StringBuilder() ;</p>\n<p>while ( IndexNum > 0 ) {<br>\nsb.append ( ALPHABET_MAP.charAt ( IndexNum % BASE ) ) ;<br>\nIndexNum /= BASE ;<br>\n}<br>\nreturn sb.reverse().toString() ;<br>\n}</p>\n<p>public static int decode ( String str ) {<br>\nint Num = 0 ;</p>\n<p>for ( int i = 0, len = str.length(); i &#x3C; len; i++ ) {<br>\nNum = Num * BASE + ALPHABET_MAP.indexOf ( str.charAt(i) ) ;<br>\n}<br>\nreturn Num ;<br>\n}</p>\n<p>public static void main ( String[] args ) {<br>\n//System.out.println ( \"Encoding for 123 is \" + encode(123) ) ;<br>\n//System.out.println ( \"Decoding for b9 is \" + decode (\"b9\" ) ) ;</p>\n<p>assertEquals ( \"b9\", encode(123) ) ;<br>\nassertEquals ( 123, decode(\"b9\") ) ;<br>\n}<br>\n}</p>\n<p>I think this is more of a design question than a coding one.</p>\n<p>We can think about  </p>\n<ul>\n<li>reducing the response time of the server<br>\n---- by using a distributed system to share the load based on geography<br>\n---- by using a central server but many caching servers at various geographical locations<br>\n---- what would be the right database design</li>\n<li>reducing the storage space<br>\n---- database design</li>\n<li>backup and failover</li>\n<li>security issues<br>\n---- prevent people from creating links to ---whatever---</li>\n<li>handling old/obsolete urls<br>\n---- may be, while creating the url we can say to the user that it will be deleted if the url is never used for more than say 3 years<br>\n---- may be allow the user to login and delete unused ones</li>\n<li>how a company like bit.ly is going to make profit out of this service! how can that be improved</li>\n<li>user friendly things<br>\n---- browser plugins to speed up creating links (youtube sharing has an option to create short urls)<br>\n---- giving report to user about the usage statistics<br>\n---- mobile app to create urls quickly</li>\n</ul>\n<p>.....</p>","excerpt":"Redirect Part: When you click on a link of any tiny url, an HTTP Request is sent to their server with the full URL, like http // bit.ly / b9 (not a real oneâ€¦","frontmatter":{"date":"01 January, 2015","path":"/blog/2015-01-01-design-a-tiny-url-service/","title":"Design a Tiny URl Service"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}